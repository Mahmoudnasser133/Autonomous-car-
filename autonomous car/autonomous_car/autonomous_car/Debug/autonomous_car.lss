
autonomous_car.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000dc8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000dc8  00000e3c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000015cc  00000000  00000000  00000e3c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      0000051e  00000000  00000000  00002408  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000180  00000000  00000000  00002928  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000011de  00000000  00000000  00002aa8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000567  00000000  00000000  00003c86  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000b41  00000000  00000000  000041ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000270  00000000  00000000  00004d30  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000397  00000000  00000000  00004fa0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000e59  00000000  00000000  00005337  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 ec       	ldi	r30, 0xC8	; 200
  68:	fd e0       	ldi	r31, 0x0D	; 13
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 e2 06 	jmp	0xdc4	; 0xdc4 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
#include "ultrasonic_sensor.h"
#include "PWM.h"

int main(void)
{
	dc_motor_vInit('A');
  92:	81 e4       	ldi	r24, 0x41	; 65
  94:	0e 94 ee 00 	call	0x1dc	; 0x1dc <dc_motor_vInit>
	dc_motor_vEnable('A',2);
  98:	81 e4       	ldi	r24, 0x41	; 65
  9a:	62 e0       	ldi	r22, 0x02	; 2
  9c:	0e 94 0f 01 	call	0x21e	; 0x21e <dc_motor_vEnable>
	dc_motor_vEnable('A',3);
  a0:	81 e4       	ldi	r24, 0x41	; 65
  a2:	63 e0       	ldi	r22, 0x03	; 3
  a4:	0e 94 0f 01 	call	0x21e	; 0x21e <dc_motor_vEnable>
	
	LED_vInit('B',0);
  a8:	82 e4       	ldi	r24, 0x42	; 66
  aa:	60 e0       	ldi	r22, 0x00	; 0
  ac:	0e 94 05 04 	call	0x80a	; 0x80a <LED_vInit>
	LED_vInit('B',1);
  b0:	82 e4       	ldi	r24, 0x42	; 66
  b2:	61 e0       	ldi	r22, 0x01	; 1
  b4:	0e 94 05 04 	call	0x80a	; 0x80a <LED_vInit>


	while(1)
    {
		
		front_dist = dist('C',1);
  b8:	83 e4       	ldi	r24, 0x43	; 67
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	61 e0       	ldi	r22, 0x01	; 1
  be:	70 e0       	ldi	r23, 0x00	; 0
  c0:	0e 94 57 05 	call	0xaae	; 0xaae <dist>
  c4:	ec 01       	movw	r28, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c6:	8f e7       	ldi	r24, 0x7F	; 127
  c8:	98 e3       	ldi	r25, 0x38	; 56
  ca:	a1 e0       	ldi	r26, 0x01	; 1
  cc:	81 50       	subi	r24, 0x01	; 1
  ce:	90 40       	sbci	r25, 0x00	; 0
  d0:	a0 40       	sbci	r26, 0x00	; 0
  d2:	e1 f7       	brne	.-8      	; 0xcc <main+0x3a>
  d4:	00 c0       	rjmp	.+0      	; 0xd6 <main+0x44>
  d6:	00 00       	nop
		_delay_ms(50);
		back_dist = dist('C',0);
  d8:	83 e4       	ldi	r24, 0x43	; 67
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	60 e0       	ldi	r22, 0x00	; 0
  de:	70 e0       	ldi	r23, 0x00	; 0
  e0:	0e 94 57 05 	call	0xaae	; 0xaae <dist>
  e4:	8c 01       	movw	r16, r24
  e6:	8f e7       	ldi	r24, 0x7F	; 127
  e8:	98 e3       	ldi	r25, 0x38	; 56
  ea:	a1 e0       	ldi	r26, 0x01	; 1
  ec:	81 50       	subi	r24, 0x01	; 1
  ee:	90 40       	sbci	r25, 0x00	; 0
  f0:	a0 40       	sbci	r26, 0x00	; 0
  f2:	e1 f7       	brne	.-8      	; 0xec <main+0x5a>
  f4:	00 c0       	rjmp	.+0      	; 0xf6 <main+0x64>
  f6:	00 00       	nop
		_delay_ms(50);


		if (front_dist< 10 )
  f8:	ca 30       	cpi	r28, 0x0A	; 10
  fa:	d1 05       	cpc	r29, r1
  fc:	08 f0       	brcs	.+2      	; 0x100 <main+0x6e>
  fe:	65 c0       	rjmp	.+202    	; 0x1ca <main+0x138>
		{
			
			dc_motor_vstop('A');
 100:	81 e4       	ldi	r24, 0x41	; 65
 102:	0e 94 42 01 	call	0x284	; 0x284 <dc_motor_vstop>
 106:	8f ef       	ldi	r24, 0xFF	; 255
 108:	99 e6       	ldi	r25, 0x69	; 105
 10a:	a8 e1       	ldi	r26, 0x18	; 24
 10c:	81 50       	subi	r24, 0x01	; 1
 10e:	90 40       	sbci	r25, 0x00	; 0
 110:	a0 40       	sbci	r26, 0x00	; 0
 112:	e1 f7       	brne	.-8      	; 0x10c <main+0x7a>
 114:	00 c0       	rjmp	.+0      	; 0x116 <main+0x84>
 116:	00 00       	nop
			_delay_ms(1000);
			
			if (back_dist < 10)
 118:	0a 30       	cpi	r16, 0x0A	; 10
 11a:	11 05       	cpc	r17, r1
 11c:	20 f4       	brcc	.+8      	; 0x126 <main+0x94>
			{
				dc_motor_vstop('A');
 11e:	81 e4       	ldi	r24, 0x41	; 65
 120:	0e 94 42 01 	call	0x284	; 0x284 <dc_motor_vstop>
 124:	c9 cf       	rjmp	.-110    	; 0xb8 <main+0x26>
			}
			
			if (back_dist >= 10)
			{
				/***** Move the car backwards ***********/
				dc_motor_vstart('A','B');
 126:	81 e4       	ldi	r24, 0x41	; 65
 128:	62 e4       	ldi	r22, 0x42	; 66
 12a:	0e 94 13 01 	call	0x226	; 0x226 <dc_motor_vstart>
				LED_vTurnOn('B',1);
 12e:	82 e4       	ldi	r24, 0x42	; 66
 130:	61 e0       	ldi	r22, 0x01	; 1
 132:	0e 94 09 04 	call	0x812	; 0x812 <LED_vTurnOn>
				LED_vTurnOff('B',0);
 136:	82 e4       	ldi	r24, 0x42	; 66
 138:	60 e0       	ldi	r22, 0x00	; 0
 13a:	0e 94 0d 04 	call	0x81a	; 0x81a <LED_vTurnOff>
 13e:	8f ef       	ldi	r24, 0xFF	; 255
 140:	99 e6       	ldi	r25, 0x69	; 105
 142:	a8 e1       	ldi	r26, 0x18	; 24
 144:	81 50       	subi	r24, 0x01	; 1
 146:	90 40       	sbci	r25, 0x00	; 0
 148:	a0 40       	sbci	r26, 0x00	; 0
 14a:	e1 f7       	brne	.-8      	; 0x144 <main+0xb2>
 14c:	00 c0       	rjmp	.+0      	; 0x14e <main+0xbc>
 14e:	00 00       	nop
				_delay_ms(1000);
				dc_motor_vstop('A');
 150:	81 e4       	ldi	r24, 0x41	; 65
 152:	0e 94 42 01 	call	0x284	; 0x284 <dc_motor_vstop>
				
				/*********** turn right ****************/
				PWM('C',3,2);
 156:	83 e4       	ldi	r24, 0x43	; 67
 158:	63 e0       	ldi	r22, 0x03	; 3
 15a:	70 e0       	ldi	r23, 0x00	; 0
 15c:	20 e0       	ldi	r18, 0x00	; 0
 15e:	30 e0       	ldi	r19, 0x00	; 0
 160:	40 e0       	ldi	r20, 0x00	; 0
 162:	50 e4       	ldi	r21, 0x40	; 64
 164:	0e 94 14 04 	call	0x828	; 0x828 <PWM>
 168:	8f ef       	ldi	r24, 0xFF	; 255
 16a:	99 e6       	ldi	r25, 0x69	; 105
 16c:	a8 e1       	ldi	r26, 0x18	; 24
 16e:	81 50       	subi	r24, 0x01	; 1
 170:	90 40       	sbci	r25, 0x00	; 0
 172:	a0 40       	sbci	r26, 0x00	; 0
 174:	e1 f7       	brne	.-8      	; 0x16e <main+0xdc>
 176:	00 c0       	rjmp	.+0      	; 0x178 <main+0xe6>
 178:	00 00       	nop
				_delay_ms(1000);
				/***** Move the car forwards then turn left  ***********/
				dc_motor_vstart('A','F');
 17a:	81 e4       	ldi	r24, 0x41	; 65
 17c:	66 e4       	ldi	r22, 0x46	; 70
 17e:	0e 94 13 01 	call	0x226	; 0x226 <dc_motor_vstart>
				LED_vTurnOn('B',0);
 182:	82 e4       	ldi	r24, 0x42	; 66
 184:	60 e0       	ldi	r22, 0x00	; 0
 186:	0e 94 09 04 	call	0x812	; 0x812 <LED_vTurnOn>
				LED_vTurnOff('B',1);
 18a:	82 e4       	ldi	r24, 0x42	; 66
 18c:	61 e0       	ldi	r22, 0x01	; 1
 18e:	0e 94 0d 04 	call	0x81a	; 0x81a <LED_vTurnOff>
 192:	8f ef       	ldi	r24, 0xFF	; 255
 194:	99 e6       	ldi	r25, 0x69	; 105
 196:	a8 e1       	ldi	r26, 0x18	; 24
 198:	81 50       	subi	r24, 0x01	; 1
 19a:	90 40       	sbci	r25, 0x00	; 0
 19c:	a0 40       	sbci	r26, 0x00	; 0
 19e:	e1 f7       	brne	.-8      	; 0x198 <main+0x106>
 1a0:	00 c0       	rjmp	.+0      	; 0x1a2 <main+0x110>
 1a2:	00 00       	nop
				_delay_ms(1000);
				PWM('C',3,1.5);
 1a4:	83 e4       	ldi	r24, 0x43	; 67
 1a6:	63 e0       	ldi	r22, 0x03	; 3
 1a8:	70 e0       	ldi	r23, 0x00	; 0
 1aa:	20 e0       	ldi	r18, 0x00	; 0
 1ac:	30 e0       	ldi	r19, 0x00	; 0
 1ae:	40 ec       	ldi	r20, 0xC0	; 192
 1b0:	5f e3       	ldi	r21, 0x3F	; 63
 1b2:	0e 94 14 04 	call	0x828	; 0x828 <PWM>
 1b6:	8f ef       	ldi	r24, 0xFF	; 255
 1b8:	94 e3       	ldi	r25, 0x34	; 52
 1ba:	ac e0       	ldi	r26, 0x0C	; 12
 1bc:	81 50       	subi	r24, 0x01	; 1
 1be:	90 40       	sbci	r25, 0x00	; 0
 1c0:	a0 40       	sbci	r26, 0x00	; 0
 1c2:	e1 f7       	brne	.-8      	; 0x1bc <main+0x12a>
 1c4:	00 c0       	rjmp	.+0      	; 0x1c6 <main+0x134>
 1c6:	00 00       	nop
 1c8:	77 cf       	rjmp	.-274    	; 0xb8 <main+0x26>
		}		
		
		if (front_dist >= 10)
		{
				/***** Move the car forwards******/
			dc_motor_vstart('A','F');
 1ca:	81 e4       	ldi	r24, 0x41	; 65
 1cc:	66 e4       	ldi	r22, 0x46	; 70
 1ce:	0e 94 13 01 	call	0x226	; 0x226 <dc_motor_vstart>
			LED_vTurnOn('B',0);
 1d2:	82 e4       	ldi	r24, 0x42	; 66
 1d4:	60 e0       	ldi	r22, 0x00	; 0
 1d6:	0e 94 09 04 	call	0x812	; 0x812 <LED_vTurnOn>
 1da:	6e cf       	rjmp	.-292    	; 0xb8 <main+0x26>

000001dc <dc_motor_vInit>:

#include "DIO.h"


void dc_motor_vInit(unsigned char port)
{
 1dc:	cf 93       	push	r28
 1de:	c8 2f       	mov	r28, r24
	DIO_vsetPINDir(port,0,1);
 1e0:	60 e0       	ldi	r22, 0x00	; 0
 1e2:	41 e0       	ldi	r20, 0x01	; 1
 1e4:	0e 94 59 01 	call	0x2b2	; 0x2b2 <DIO_vsetPINDir>
	DIO_vsetPINDir(port,1,1);
 1e8:	8c 2f       	mov	r24, r28
 1ea:	61 e0       	ldi	r22, 0x01	; 1
 1ec:	41 e0       	ldi	r20, 0x01	; 1
 1ee:	0e 94 59 01 	call	0x2b2	; 0x2b2 <DIO_vsetPINDir>
	DIO_vsetPINDir(port,2,1);
 1f2:	8c 2f       	mov	r24, r28
 1f4:	62 e0       	ldi	r22, 0x02	; 2
 1f6:	41 e0       	ldi	r20, 0x01	; 1
 1f8:	0e 94 59 01 	call	0x2b2	; 0x2b2 <DIO_vsetPINDir>
	DIO_vsetPINDir(port,3,1);
 1fc:	8c 2f       	mov	r24, r28
 1fe:	63 e0       	ldi	r22, 0x03	; 3
 200:	41 e0       	ldi	r20, 0x01	; 1
 202:	0e 94 59 01 	call	0x2b2	; 0x2b2 <DIO_vsetPINDir>
	DIO_vsetPINDir(port,4,1);
 206:	8c 2f       	mov	r24, r28
 208:	64 e0       	ldi	r22, 0x04	; 4
 20a:	41 e0       	ldi	r20, 0x01	; 1
 20c:	0e 94 59 01 	call	0x2b2	; 0x2b2 <DIO_vsetPINDir>
	DIO_vsetPINDir(port,5,1);
 210:	8c 2f       	mov	r24, r28
 212:	65 e0       	ldi	r22, 0x05	; 5
 214:	41 e0       	ldi	r20, 0x01	; 1
 216:	0e 94 59 01 	call	0x2b2	; 0x2b2 <DIO_vsetPINDir>
	
} 
 21a:	cf 91       	pop	r28
 21c:	08 95       	ret

0000021e <dc_motor_vEnable>:

void dc_motor_vEnable(unsigned char portname,unsigned char pinnumber)
{
	DIO_write(portname,pinnumber,1);//Set the given pin in the given port to one(on)
 21e:	41 e0       	ldi	r20, 0x01	; 1
 220:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <DIO_write>
}
 224:	08 95       	ret

00000226 <dc_motor_vstart>:

void dc_motor_vstart(unsigned char portname,unsigned char direction)
{
 226:	cf 93       	push	r28
 228:	c8 2f       	mov	r28, r24
	switch (direction)
 22a:	62 34       	cpi	r22, 0x42	; 66
 22c:	b1 f0       	breq	.+44     	; 0x25a <dc_motor_vstart+0x34>
 22e:	66 34       	cpi	r22, 0x46	; 70
 230:	39 f5       	brne	.+78     	; 0x280 <dc_motor_vstart+0x5a>
	{
		
		case 'F':
		DIO_write(portname,0,1);
 232:	60 e0       	ldi	r22, 0x00	; 0
 234:	41 e0       	ldi	r20, 0x01	; 1
 236:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <DIO_write>
		DIO_write(portname,1,0);
 23a:	8c 2f       	mov	r24, r28
 23c:	61 e0       	ldi	r22, 0x01	; 1
 23e:	40 e0       	ldi	r20, 0x00	; 0
 240:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <DIO_write>
		/***************** motor 2****************/
		DIO_write(portname,4,1);
 244:	8c 2f       	mov	r24, r28
 246:	64 e0       	ldi	r22, 0x04	; 4
 248:	41 e0       	ldi	r20, 0x01	; 1
 24a:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <DIO_write>
		DIO_write(portname,5,0);
 24e:	8c 2f       	mov	r24, r28
 250:	65 e0       	ldi	r22, 0x05	; 5
 252:	40 e0       	ldi	r20, 0x00	; 0
 254:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <DIO_write>
		break;
 258:	13 c0       	rjmp	.+38     	; 0x280 <dc_motor_vstart+0x5a>
		
		case 'B':
		DIO_write(portname,0,0);
 25a:	60 e0       	ldi	r22, 0x00	; 0
 25c:	40 e0       	ldi	r20, 0x00	; 0
 25e:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <DIO_write>
		DIO_write(portname,1,1);
 262:	8c 2f       	mov	r24, r28
 264:	61 e0       	ldi	r22, 0x01	; 1
 266:	41 e0       	ldi	r20, 0x01	; 1
 268:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <DIO_write>
		/***************** motor 2****************/
		DIO_write(portname,4,0);
 26c:	8c 2f       	mov	r24, r28
 26e:	64 e0       	ldi	r22, 0x04	; 4
 270:	40 e0       	ldi	r20, 0x00	; 0
 272:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <DIO_write>
		DIO_write(portname,5,1);
 276:	8c 2f       	mov	r24, r28
 278:	65 e0       	ldi	r22, 0x05	; 5
 27a:	41 e0       	ldi	r20, 0x01	; 1
 27c:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <DIO_write>
		break;
	}
	
}
 280:	cf 91       	pop	r28
 282:	08 95       	ret

00000284 <dc_motor_vstop>:

void dc_motor_vstop(unsigned char portname)
{
 284:	cf 93       	push	r28
 286:	c8 2f       	mov	r28, r24
	
		DIO_write(portname,0,0);//Set the given pin in the given port to one(on)
 288:	60 e0       	ldi	r22, 0x00	; 0
 28a:	40 e0       	ldi	r20, 0x00	; 0
 28c:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <DIO_write>
		DIO_write(portname,1,0);
 290:	8c 2f       	mov	r24, r28
 292:	61 e0       	ldi	r22, 0x01	; 1
 294:	40 e0       	ldi	r20, 0x00	; 0
 296:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <DIO_write>
		/***************** motor 2****************/
		DIO_write(portname,4,0);//Set the given pin in the given port to one(on)
 29a:	8c 2f       	mov	r24, r28
 29c:	64 e0       	ldi	r22, 0x04	; 4
 29e:	40 e0       	ldi	r20, 0x00	; 0
 2a0:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <DIO_write>
		DIO_write(portname,5,0);
 2a4:	8c 2f       	mov	r24, r28
 2a6:	65 e0       	ldi	r22, 0x05	; 5
 2a8:	40 e0       	ldi	r20, 0x00	; 0
 2aa:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <DIO_write>
		
	
	
}
 2ae:	cf 91       	pop	r28
 2b0:	08 95       	ret

000002b2 <DIO_vsetPINDir>:

#include <avr/io.h>
#include "std_macros.h"
void DIO_vsetPINDir(unsigned char portname,unsigned char pinnumber,unsigned char direction)
{
	switch(portname)
 2b2:	82 34       	cpi	r24, 0x42	; 66
 2b4:	51 f1       	breq	.+84     	; 0x30a <DIO_vsetPINDir+0x58>
 2b6:	83 34       	cpi	r24, 0x43	; 67
 2b8:	20 f4       	brcc	.+8      	; 0x2c2 <DIO_vsetPINDir+0x10>
 2ba:	81 34       	cpi	r24, 0x41	; 65
 2bc:	09 f0       	breq	.+2      	; 0x2c0 <DIO_vsetPINDir+0xe>
 2be:	7b c0       	rjmp	.+246    	; 0x3b6 <DIO_vsetPINDir+0x104>
 2c0:	07 c0       	rjmp	.+14     	; 0x2d0 <DIO_vsetPINDir+0x1e>
 2c2:	83 34       	cpi	r24, 0x43	; 67
 2c4:	09 f4       	brne	.+2      	; 0x2c8 <DIO_vsetPINDir+0x16>
 2c6:	3e c0       	rjmp	.+124    	; 0x344 <DIO_vsetPINDir+0x92>
 2c8:	84 34       	cpi	r24, 0x44	; 68
 2ca:	09 f0       	breq	.+2      	; 0x2ce <DIO_vsetPINDir+0x1c>
 2cc:	74 c0       	rjmp	.+232    	; 0x3b6 <DIO_vsetPINDir+0x104>
 2ce:	57 c0       	rjmp	.+174    	; 0x37e <DIO_vsetPINDir+0xcc>
	{
		
		
		case 'A':
		if(direction==1)
 2d0:	41 30       	cpi	r20, 0x01	; 1
 2d2:	69 f4       	brne	.+26     	; 0x2ee <DIO_vsetPINDir+0x3c>
		{
			SET_BIT(DDRA,pinnumber);//Set the direction of the given pin in port A as output
 2d4:	2a b3       	in	r18, 0x1a	; 26
 2d6:	81 e0       	ldi	r24, 0x01	; 1
 2d8:	90 e0       	ldi	r25, 0x00	; 0
 2da:	ac 01       	movw	r20, r24
 2dc:	02 c0       	rjmp	.+4      	; 0x2e2 <DIO_vsetPINDir+0x30>
 2de:	44 0f       	add	r20, r20
 2e0:	55 1f       	adc	r21, r21
 2e2:	6a 95       	dec	r22
 2e4:	e2 f7       	brpl	.-8      	; 0x2de <DIO_vsetPINDir+0x2c>
 2e6:	ba 01       	movw	r22, r20
 2e8:	62 2b       	or	r22, r18
 2ea:	6a bb       	out	0x1a, r22	; 26
 2ec:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRA,pinnumber);//Set the direction of the given pin in port A as input
 2ee:	2a b3       	in	r18, 0x1a	; 26
 2f0:	81 e0       	ldi	r24, 0x01	; 1
 2f2:	90 e0       	ldi	r25, 0x00	; 0
 2f4:	ac 01       	movw	r20, r24
 2f6:	02 c0       	rjmp	.+4      	; 0x2fc <DIO_vsetPINDir+0x4a>
 2f8:	44 0f       	add	r20, r20
 2fa:	55 1f       	adc	r21, r21
 2fc:	6a 95       	dec	r22
 2fe:	e2 f7       	brpl	.-8      	; 0x2f8 <DIO_vsetPINDir+0x46>
 300:	ba 01       	movw	r22, r20
 302:	60 95       	com	r22
 304:	62 23       	and	r22, r18
 306:	6a bb       	out	0x1a, r22	; 26
 308:	08 95       	ret
		}
		break;
		case 'B':
		if(direction==1)
 30a:	41 30       	cpi	r20, 0x01	; 1
 30c:	69 f4       	brne	.+26     	; 0x328 <DIO_vsetPINDir+0x76>
		{
			SET_BIT(DDRB,pinnumber);//Set the direction of the given pin in port B as output
 30e:	27 b3       	in	r18, 0x17	; 23
 310:	81 e0       	ldi	r24, 0x01	; 1
 312:	90 e0       	ldi	r25, 0x00	; 0
 314:	ac 01       	movw	r20, r24
 316:	02 c0       	rjmp	.+4      	; 0x31c <DIO_vsetPINDir+0x6a>
 318:	44 0f       	add	r20, r20
 31a:	55 1f       	adc	r21, r21
 31c:	6a 95       	dec	r22
 31e:	e2 f7       	brpl	.-8      	; 0x318 <DIO_vsetPINDir+0x66>
 320:	ba 01       	movw	r22, r20
 322:	62 2b       	or	r22, r18
 324:	67 bb       	out	0x17, r22	; 23
 326:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRB,pinnumber);//Set the direction of the given pin in port B as input
 328:	27 b3       	in	r18, 0x17	; 23
 32a:	81 e0       	ldi	r24, 0x01	; 1
 32c:	90 e0       	ldi	r25, 0x00	; 0
 32e:	ac 01       	movw	r20, r24
 330:	02 c0       	rjmp	.+4      	; 0x336 <DIO_vsetPINDir+0x84>
 332:	44 0f       	add	r20, r20
 334:	55 1f       	adc	r21, r21
 336:	6a 95       	dec	r22
 338:	e2 f7       	brpl	.-8      	; 0x332 <DIO_vsetPINDir+0x80>
 33a:	ba 01       	movw	r22, r20
 33c:	60 95       	com	r22
 33e:	62 23       	and	r22, r18
 340:	67 bb       	out	0x17, r22	; 23
 342:	08 95       	ret
		}
		break;
		case 'C':
		if(direction==1)
 344:	41 30       	cpi	r20, 0x01	; 1
 346:	69 f4       	brne	.+26     	; 0x362 <DIO_vsetPINDir+0xb0>
		{
			SET_BIT(DDRC,pinnumber);//Set the direction of the given pin in port C as output
 348:	24 b3       	in	r18, 0x14	; 20
 34a:	81 e0       	ldi	r24, 0x01	; 1
 34c:	90 e0       	ldi	r25, 0x00	; 0
 34e:	ac 01       	movw	r20, r24
 350:	02 c0       	rjmp	.+4      	; 0x356 <DIO_vsetPINDir+0xa4>
 352:	44 0f       	add	r20, r20
 354:	55 1f       	adc	r21, r21
 356:	6a 95       	dec	r22
 358:	e2 f7       	brpl	.-8      	; 0x352 <DIO_vsetPINDir+0xa0>
 35a:	ba 01       	movw	r22, r20
 35c:	62 2b       	or	r22, r18
 35e:	64 bb       	out	0x14, r22	; 20
 360:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRC,pinnumber);//Set the direction of the given pin in port C as input
 362:	24 b3       	in	r18, 0x14	; 20
 364:	81 e0       	ldi	r24, 0x01	; 1
 366:	90 e0       	ldi	r25, 0x00	; 0
 368:	ac 01       	movw	r20, r24
 36a:	02 c0       	rjmp	.+4      	; 0x370 <DIO_vsetPINDir+0xbe>
 36c:	44 0f       	add	r20, r20
 36e:	55 1f       	adc	r21, r21
 370:	6a 95       	dec	r22
 372:	e2 f7       	brpl	.-8      	; 0x36c <DIO_vsetPINDir+0xba>
 374:	ba 01       	movw	r22, r20
 376:	60 95       	com	r22
 378:	62 23       	and	r22, r18
 37a:	64 bb       	out	0x14, r22	; 20
 37c:	08 95       	ret
		}
		break;
		case 'D':
		if(direction==1)
 37e:	41 30       	cpi	r20, 0x01	; 1
 380:	69 f4       	brne	.+26     	; 0x39c <DIO_vsetPINDir+0xea>
		{
			SET_BIT(DDRD,pinnumber);//Set the direction of the given pin in port D as output
 382:	21 b3       	in	r18, 0x11	; 17
 384:	81 e0       	ldi	r24, 0x01	; 1
 386:	90 e0       	ldi	r25, 0x00	; 0
 388:	ac 01       	movw	r20, r24
 38a:	02 c0       	rjmp	.+4      	; 0x390 <DIO_vsetPINDir+0xde>
 38c:	44 0f       	add	r20, r20
 38e:	55 1f       	adc	r21, r21
 390:	6a 95       	dec	r22
 392:	e2 f7       	brpl	.-8      	; 0x38c <DIO_vsetPINDir+0xda>
 394:	ba 01       	movw	r22, r20
 396:	62 2b       	or	r22, r18
 398:	61 bb       	out	0x11, r22	; 17
 39a:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRD,pinnumber);//Set the direction of the given pin in port D as input
 39c:	21 b3       	in	r18, 0x11	; 17
 39e:	81 e0       	ldi	r24, 0x01	; 1
 3a0:	90 e0       	ldi	r25, 0x00	; 0
 3a2:	ac 01       	movw	r20, r24
 3a4:	02 c0       	rjmp	.+4      	; 0x3aa <DIO_vsetPINDir+0xf8>
 3a6:	44 0f       	add	r20, r20
 3a8:	55 1f       	adc	r21, r21
 3aa:	6a 95       	dec	r22
 3ac:	e2 f7       	brpl	.-8      	; 0x3a6 <DIO_vsetPINDir+0xf4>
 3ae:	ba 01       	movw	r22, r20
 3b0:	60 95       	com	r22
 3b2:	62 23       	and	r22, r18
 3b4:	61 bb       	out	0x11, r22	; 17
 3b6:	08 95       	ret

000003b8 <DIO_write>:
}


void DIO_write(unsigned char portname,unsigned char pinnumber,unsigned char outputvalue)
{
	switch(portname)
 3b8:	82 34       	cpi	r24, 0x42	; 66
 3ba:	51 f1       	breq	.+84     	; 0x410 <DIO_write+0x58>
 3bc:	83 34       	cpi	r24, 0x43	; 67
 3be:	20 f4       	brcc	.+8      	; 0x3c8 <DIO_write+0x10>
 3c0:	81 34       	cpi	r24, 0x41	; 65
 3c2:	09 f0       	breq	.+2      	; 0x3c6 <DIO_write+0xe>
 3c4:	7b c0       	rjmp	.+246    	; 0x4bc <DIO_write+0x104>
 3c6:	07 c0       	rjmp	.+14     	; 0x3d6 <DIO_write+0x1e>
 3c8:	83 34       	cpi	r24, 0x43	; 67
 3ca:	09 f4       	brne	.+2      	; 0x3ce <DIO_write+0x16>
 3cc:	3e c0       	rjmp	.+124    	; 0x44a <DIO_write+0x92>
 3ce:	84 34       	cpi	r24, 0x44	; 68
 3d0:	09 f0       	breq	.+2      	; 0x3d4 <DIO_write+0x1c>
 3d2:	74 c0       	rjmp	.+232    	; 0x4bc <DIO_write+0x104>
 3d4:	57 c0       	rjmp	.+174    	; 0x484 <DIO_write+0xcc>
	{
		case 'A' :
		
		if(outputvalue==1)
 3d6:	41 30       	cpi	r20, 0x01	; 1
 3d8:	69 f4       	brne	.+26     	; 0x3f4 <DIO_write+0x3c>
		{
			SET_BIT(PORTA,pinnumber);//Set the value of the given pin in port A as High
 3da:	2b b3       	in	r18, 0x1b	; 27
 3dc:	81 e0       	ldi	r24, 0x01	; 1
 3de:	90 e0       	ldi	r25, 0x00	; 0
 3e0:	ac 01       	movw	r20, r24
 3e2:	02 c0       	rjmp	.+4      	; 0x3e8 <DIO_write+0x30>
 3e4:	44 0f       	add	r20, r20
 3e6:	55 1f       	adc	r21, r21
 3e8:	6a 95       	dec	r22
 3ea:	e2 f7       	brpl	.-8      	; 0x3e4 <DIO_write+0x2c>
 3ec:	ba 01       	movw	r22, r20
 3ee:	62 2b       	or	r22, r18
 3f0:	6b bb       	out	0x1b, r22	; 27
 3f2:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTA,pinnumber);//Set the value of the given pin in port A as Low
 3f4:	2b b3       	in	r18, 0x1b	; 27
 3f6:	81 e0       	ldi	r24, 0x01	; 1
 3f8:	90 e0       	ldi	r25, 0x00	; 0
 3fa:	ac 01       	movw	r20, r24
 3fc:	02 c0       	rjmp	.+4      	; 0x402 <DIO_write+0x4a>
 3fe:	44 0f       	add	r20, r20
 400:	55 1f       	adc	r21, r21
 402:	6a 95       	dec	r22
 404:	e2 f7       	brpl	.-8      	; 0x3fe <DIO_write+0x46>
 406:	ba 01       	movw	r22, r20
 408:	60 95       	com	r22
 40a:	62 23       	and	r22, r18
 40c:	6b bb       	out	0x1b, r22	; 27
 40e:	08 95       	ret
		}
		break ;
		case 'B':
		
		if(outputvalue==1)
 410:	41 30       	cpi	r20, 0x01	; 1
 412:	69 f4       	brne	.+26     	; 0x42e <DIO_write+0x76>
		{
			SET_BIT(PORTB,pinnumber);//Set the value of the given pin in port B as High
 414:	28 b3       	in	r18, 0x18	; 24
 416:	81 e0       	ldi	r24, 0x01	; 1
 418:	90 e0       	ldi	r25, 0x00	; 0
 41a:	ac 01       	movw	r20, r24
 41c:	02 c0       	rjmp	.+4      	; 0x422 <DIO_write+0x6a>
 41e:	44 0f       	add	r20, r20
 420:	55 1f       	adc	r21, r21
 422:	6a 95       	dec	r22
 424:	e2 f7       	brpl	.-8      	; 0x41e <DIO_write+0x66>
 426:	ba 01       	movw	r22, r20
 428:	62 2b       	or	r22, r18
 42a:	68 bb       	out	0x18, r22	; 24
 42c:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTB,pinnumber);//Set the value of the given pin in port B as Low
 42e:	28 b3       	in	r18, 0x18	; 24
 430:	81 e0       	ldi	r24, 0x01	; 1
 432:	90 e0       	ldi	r25, 0x00	; 0
 434:	ac 01       	movw	r20, r24
 436:	02 c0       	rjmp	.+4      	; 0x43c <DIO_write+0x84>
 438:	44 0f       	add	r20, r20
 43a:	55 1f       	adc	r21, r21
 43c:	6a 95       	dec	r22
 43e:	e2 f7       	brpl	.-8      	; 0x438 <DIO_write+0x80>
 440:	ba 01       	movw	r22, r20
 442:	60 95       	com	r22
 444:	62 23       	and	r22, r18
 446:	68 bb       	out	0x18, r22	; 24
 448:	08 95       	ret
		}
		break ;
		case 'C' :
		
		if(outputvalue==1)
 44a:	41 30       	cpi	r20, 0x01	; 1
 44c:	69 f4       	brne	.+26     	; 0x468 <DIO_write+0xb0>
		{
			SET_BIT(PORTC,pinnumber);//Set the value of the given pin in port C as High
 44e:	25 b3       	in	r18, 0x15	; 21
 450:	81 e0       	ldi	r24, 0x01	; 1
 452:	90 e0       	ldi	r25, 0x00	; 0
 454:	ac 01       	movw	r20, r24
 456:	02 c0       	rjmp	.+4      	; 0x45c <DIO_write+0xa4>
 458:	44 0f       	add	r20, r20
 45a:	55 1f       	adc	r21, r21
 45c:	6a 95       	dec	r22
 45e:	e2 f7       	brpl	.-8      	; 0x458 <DIO_write+0xa0>
 460:	ba 01       	movw	r22, r20
 462:	62 2b       	or	r22, r18
 464:	65 bb       	out	0x15, r22	; 21
 466:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTC,pinnumber);//Set the value of the given pin in port C as Low
 468:	25 b3       	in	r18, 0x15	; 21
 46a:	81 e0       	ldi	r24, 0x01	; 1
 46c:	90 e0       	ldi	r25, 0x00	; 0
 46e:	ac 01       	movw	r20, r24
 470:	02 c0       	rjmp	.+4      	; 0x476 <DIO_write+0xbe>
 472:	44 0f       	add	r20, r20
 474:	55 1f       	adc	r21, r21
 476:	6a 95       	dec	r22
 478:	e2 f7       	brpl	.-8      	; 0x472 <DIO_write+0xba>
 47a:	ba 01       	movw	r22, r20
 47c:	60 95       	com	r22
 47e:	62 23       	and	r22, r18
 480:	65 bb       	out	0x15, r22	; 21
 482:	08 95       	ret
		}
		break ;
		case 'D':
		
		if(outputvalue==1)
 484:	41 30       	cpi	r20, 0x01	; 1
 486:	69 f4       	brne	.+26     	; 0x4a2 <DIO_write+0xea>
		{
			SET_BIT(PORTD,pinnumber);//Set the value of the given pin in port D as High
 488:	22 b3       	in	r18, 0x12	; 18
 48a:	81 e0       	ldi	r24, 0x01	; 1
 48c:	90 e0       	ldi	r25, 0x00	; 0
 48e:	ac 01       	movw	r20, r24
 490:	02 c0       	rjmp	.+4      	; 0x496 <DIO_write+0xde>
 492:	44 0f       	add	r20, r20
 494:	55 1f       	adc	r21, r21
 496:	6a 95       	dec	r22
 498:	e2 f7       	brpl	.-8      	; 0x492 <DIO_write+0xda>
 49a:	ba 01       	movw	r22, r20
 49c:	62 2b       	or	r22, r18
 49e:	62 bb       	out	0x12, r22	; 18
 4a0:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTD,pinnumber);//Set the value of the given pin in port D as Low
 4a2:	22 b3       	in	r18, 0x12	; 18
 4a4:	81 e0       	ldi	r24, 0x01	; 1
 4a6:	90 e0       	ldi	r25, 0x00	; 0
 4a8:	ac 01       	movw	r20, r24
 4aa:	02 c0       	rjmp	.+4      	; 0x4b0 <DIO_write+0xf8>
 4ac:	44 0f       	add	r20, r20
 4ae:	55 1f       	adc	r21, r21
 4b0:	6a 95       	dec	r22
 4b2:	e2 f7       	brpl	.-8      	; 0x4ac <DIO_write+0xf4>
 4b4:	ba 01       	movw	r22, r20
 4b6:	60 95       	com	r22
 4b8:	62 23       	and	r22, r18
 4ba:	62 bb       	out	0x12, r22	; 18
 4bc:	08 95       	ret

000004be <DIO_u8read>:


unsigned char DIO_u8read(unsigned char portname,unsigned char pinnumber)
{
	unsigned char return_value=0;
	switch(portname)
 4be:	82 34       	cpi	r24, 0x42	; 66
 4c0:	f1 f0       	breq	.+60     	; 0x4fe <DIO_u8read+0x40>
 4c2:	83 34       	cpi	r24, 0x43	; 67
 4c4:	20 f4       	brcc	.+8      	; 0x4ce <DIO_u8read+0x10>
 4c6:	81 34       	cpi	r24, 0x41	; 65
 4c8:	09 f0       	breq	.+2      	; 0x4cc <DIO_u8read+0xe>
 4ca:	4f c0       	rjmp	.+158    	; 0x56a <DIO_u8read+0xac>
 4cc:	06 c0       	rjmp	.+12     	; 0x4da <DIO_u8read+0x1c>
 4ce:	83 34       	cpi	r24, 0x43	; 67
 4d0:	41 f1       	breq	.+80     	; 0x522 <DIO_u8read+0x64>
 4d2:	84 34       	cpi	r24, 0x44	; 68
 4d4:	09 f0       	breq	.+2      	; 0x4d8 <DIO_u8read+0x1a>
 4d6:	49 c0       	rjmp	.+146    	; 0x56a <DIO_u8read+0xac>
 4d8:	36 c0       	rjmp	.+108    	; 0x546 <DIO_u8read+0x88>
	{
		case 'A' :
		return_value=READ_BIT(PINA,pinnumber);//Read the value from the given pin in port A
 4da:	29 b3       	in	r18, 0x19	; 25
 4dc:	81 e0       	ldi	r24, 0x01	; 1
 4de:	90 e0       	ldi	r25, 0x00	; 0
 4e0:	06 2e       	mov	r0, r22
 4e2:	02 c0       	rjmp	.+4      	; 0x4e8 <DIO_u8read+0x2a>
 4e4:	88 0f       	add	r24, r24
 4e6:	99 1f       	adc	r25, r25
 4e8:	0a 94       	dec	r0
 4ea:	e2 f7       	brpl	.-8      	; 0x4e4 <DIO_u8read+0x26>
 4ec:	30 e0       	ldi	r19, 0x00	; 0
 4ee:	82 23       	and	r24, r18
 4f0:	93 23       	and	r25, r19
 4f2:	02 c0       	rjmp	.+4      	; 0x4f8 <DIO_u8read+0x3a>
 4f4:	95 95       	asr	r25
 4f6:	87 95       	ror	r24
 4f8:	6a 95       	dec	r22
 4fa:	e2 f7       	brpl	.-8      	; 0x4f4 <DIO_u8read+0x36>
		break;
 4fc:	08 95       	ret
		
		case 'B' :
		return_value=READ_BIT(PINB,pinnumber);//Read the value from the given pin in port B
 4fe:	26 b3       	in	r18, 0x16	; 22
 500:	81 e0       	ldi	r24, 0x01	; 1
 502:	90 e0       	ldi	r25, 0x00	; 0
 504:	06 2e       	mov	r0, r22
 506:	02 c0       	rjmp	.+4      	; 0x50c <DIO_u8read+0x4e>
 508:	88 0f       	add	r24, r24
 50a:	99 1f       	adc	r25, r25
 50c:	0a 94       	dec	r0
 50e:	e2 f7       	brpl	.-8      	; 0x508 <DIO_u8read+0x4a>
 510:	30 e0       	ldi	r19, 0x00	; 0
 512:	82 23       	and	r24, r18
 514:	93 23       	and	r25, r19
 516:	02 c0       	rjmp	.+4      	; 0x51c <DIO_u8read+0x5e>
 518:	95 95       	asr	r25
 51a:	87 95       	ror	r24
 51c:	6a 95       	dec	r22
 51e:	e2 f7       	brpl	.-8      	; 0x518 <DIO_u8read+0x5a>
		break;
 520:	08 95       	ret
		
		case 'C' :
		return_value=READ_BIT(PINC,pinnumber);//Read the value from the given pin in port C
 522:	23 b3       	in	r18, 0x13	; 19
 524:	81 e0       	ldi	r24, 0x01	; 1
 526:	90 e0       	ldi	r25, 0x00	; 0
 528:	06 2e       	mov	r0, r22
 52a:	02 c0       	rjmp	.+4      	; 0x530 <DIO_u8read+0x72>
 52c:	88 0f       	add	r24, r24
 52e:	99 1f       	adc	r25, r25
 530:	0a 94       	dec	r0
 532:	e2 f7       	brpl	.-8      	; 0x52c <DIO_u8read+0x6e>
 534:	30 e0       	ldi	r19, 0x00	; 0
 536:	82 23       	and	r24, r18
 538:	93 23       	and	r25, r19
 53a:	02 c0       	rjmp	.+4      	; 0x540 <DIO_u8read+0x82>
 53c:	95 95       	asr	r25
 53e:	87 95       	ror	r24
 540:	6a 95       	dec	r22
 542:	e2 f7       	brpl	.-8      	; 0x53c <DIO_u8read+0x7e>
		break;
 544:	08 95       	ret
		
		case 'D' :
		return_value=READ_BIT(PIND,pinnumber);//Read the value from the given pin in port D
 546:	20 b3       	in	r18, 0x10	; 16
 548:	81 e0       	ldi	r24, 0x01	; 1
 54a:	90 e0       	ldi	r25, 0x00	; 0
 54c:	06 2e       	mov	r0, r22
 54e:	02 c0       	rjmp	.+4      	; 0x554 <DIO_u8read+0x96>
 550:	88 0f       	add	r24, r24
 552:	99 1f       	adc	r25, r25
 554:	0a 94       	dec	r0
 556:	e2 f7       	brpl	.-8      	; 0x550 <DIO_u8read+0x92>
 558:	30 e0       	ldi	r19, 0x00	; 0
 55a:	82 23       	and	r24, r18
 55c:	93 23       	and	r25, r19
 55e:	02 c0       	rjmp	.+4      	; 0x564 <DIO_u8read+0xa6>
 560:	95 95       	asr	r25
 562:	87 95       	ror	r24
 564:	6a 95       	dec	r22
 566:	e2 f7       	brpl	.-8      	; 0x560 <DIO_u8read+0xa2>
		break;
 568:	08 95       	ret
}


unsigned char DIO_u8read(unsigned char portname,unsigned char pinnumber)
{
	unsigned char return_value=0;
 56a:	80 e0       	ldi	r24, 0x00	; 0
		break;
		default: 
		break;
	}
	return return_value ;
}
 56c:	08 95       	ret

0000056e <DIO_toggle>:
void DIO_toggle(unsigned char portname,unsigned char pinnumber)
{
	switch(portname)
 56e:	82 34       	cpi	r24, 0x42	; 66
 570:	b9 f0       	breq	.+46     	; 0x5a0 <DIO_toggle+0x32>
 572:	83 34       	cpi	r24, 0x43	; 67
 574:	18 f4       	brcc	.+6      	; 0x57c <DIO_toggle+0xe>
 576:	81 34       	cpi	r24, 0x41	; 65
 578:	c9 f5       	brne	.+114    	; 0x5ec <DIO_toggle+0x7e>
 57a:	05 c0       	rjmp	.+10     	; 0x586 <DIO_toggle+0x18>
 57c:	83 34       	cpi	r24, 0x43	; 67
 57e:	e9 f0       	breq	.+58     	; 0x5ba <DIO_toggle+0x4c>
 580:	84 34       	cpi	r24, 0x44	; 68
 582:	a1 f5       	brne	.+104    	; 0x5ec <DIO_toggle+0x7e>
 584:	27 c0       	rjmp	.+78     	; 0x5d4 <DIO_toggle+0x66>
	{
		case 'A':
		TOG_BIT(PORTA,pinnumber);//Toggle the value of the given pin in port A
 586:	2b b3       	in	r18, 0x1b	; 27
 588:	81 e0       	ldi	r24, 0x01	; 1
 58a:	90 e0       	ldi	r25, 0x00	; 0
 58c:	ac 01       	movw	r20, r24
 58e:	02 c0       	rjmp	.+4      	; 0x594 <DIO_toggle+0x26>
 590:	44 0f       	add	r20, r20
 592:	55 1f       	adc	r21, r21
 594:	6a 95       	dec	r22
 596:	e2 f7       	brpl	.-8      	; 0x590 <DIO_toggle+0x22>
 598:	ba 01       	movw	r22, r20
 59a:	62 27       	eor	r22, r18
 59c:	6b bb       	out	0x1b, r22	; 27
		break;
 59e:	08 95       	ret
		case 'B':
		TOG_BIT(PORTB,pinnumber);//Toggle the value of the given pin in port B
 5a0:	28 b3       	in	r18, 0x18	; 24
 5a2:	81 e0       	ldi	r24, 0x01	; 1
 5a4:	90 e0       	ldi	r25, 0x00	; 0
 5a6:	ac 01       	movw	r20, r24
 5a8:	02 c0       	rjmp	.+4      	; 0x5ae <DIO_toggle+0x40>
 5aa:	44 0f       	add	r20, r20
 5ac:	55 1f       	adc	r21, r21
 5ae:	6a 95       	dec	r22
 5b0:	e2 f7       	brpl	.-8      	; 0x5aa <DIO_toggle+0x3c>
 5b2:	ba 01       	movw	r22, r20
 5b4:	62 27       	eor	r22, r18
 5b6:	68 bb       	out	0x18, r22	; 24
		break;
 5b8:	08 95       	ret
		case 'C':
		TOG_BIT(PORTC,pinnumber);//Toggle the value of the given pin in port C
 5ba:	25 b3       	in	r18, 0x15	; 21
 5bc:	81 e0       	ldi	r24, 0x01	; 1
 5be:	90 e0       	ldi	r25, 0x00	; 0
 5c0:	ac 01       	movw	r20, r24
 5c2:	02 c0       	rjmp	.+4      	; 0x5c8 <DIO_toggle+0x5a>
 5c4:	44 0f       	add	r20, r20
 5c6:	55 1f       	adc	r21, r21
 5c8:	6a 95       	dec	r22
 5ca:	e2 f7       	brpl	.-8      	; 0x5c4 <DIO_toggle+0x56>
 5cc:	ba 01       	movw	r22, r20
 5ce:	62 27       	eor	r22, r18
 5d0:	65 bb       	out	0x15, r22	; 21
		break;
 5d2:	08 95       	ret
		case 'D':
		TOG_BIT(PORTD,pinnumber);//Toggle the value of the given pin in port D
 5d4:	22 b3       	in	r18, 0x12	; 18
 5d6:	81 e0       	ldi	r24, 0x01	; 1
 5d8:	90 e0       	ldi	r25, 0x00	; 0
 5da:	ac 01       	movw	r20, r24
 5dc:	02 c0       	rjmp	.+4      	; 0x5e2 <DIO_toggle+0x74>
 5de:	44 0f       	add	r20, r20
 5e0:	55 1f       	adc	r21, r21
 5e2:	6a 95       	dec	r22
 5e4:	e2 f7       	brpl	.-8      	; 0x5de <DIO_toggle+0x70>
 5e6:	ba 01       	movw	r22, r20
 5e8:	62 27       	eor	r22, r18
 5ea:	62 bb       	out	0x12, r22	; 18
 5ec:	08 95       	ret

000005ee <DIO_set_port_direction>:
		default: break;
	}
}
void DIO_set_port_direction(unsigned char portname,unsigned char direction)
{
	switch(portname)
 5ee:	82 34       	cpi	r24, 0x42	; 66
 5f0:	61 f0       	breq	.+24     	; 0x60a <DIO_set_port_direction+0x1c>
 5f2:	83 34       	cpi	r24, 0x43	; 67
 5f4:	18 f4       	brcc	.+6      	; 0x5fc <DIO_set_port_direction+0xe>
 5f6:	81 34       	cpi	r24, 0x41	; 65
 5f8:	69 f4       	brne	.+26     	; 0x614 <DIO_set_port_direction+0x26>
 5fa:	05 c0       	rjmp	.+10     	; 0x606 <DIO_set_port_direction+0x18>
 5fc:	83 34       	cpi	r24, 0x43	; 67
 5fe:	39 f0       	breq	.+14     	; 0x60e <DIO_set_port_direction+0x20>
 600:	84 34       	cpi	r24, 0x44	; 68
 602:	41 f4       	brne	.+16     	; 0x614 <DIO_set_port_direction+0x26>
 604:	06 c0       	rjmp	.+12     	; 0x612 <DIO_set_port_direction+0x24>
	{
		case 'A' :
		DDRA=direction; //set the direction of port A
 606:	6a bb       	out	0x1a, r22	; 26
		break ;
 608:	08 95       	ret
		case 'B':
		DDRB=direction; //set the direction of port B
 60a:	67 bb       	out	0x17, r22	; 23
		break ;
 60c:	08 95       	ret
		case 'C' :
		DDRC=direction; //set the direction of port C
 60e:	64 bb       	out	0x14, r22	; 20
		break ;
 610:	08 95       	ret
		case 'D':
		DDRD=direction; //set the direction of port D
 612:	61 bb       	out	0x11, r22	; 17
 614:	08 95       	ret

00000616 <DIO_write_port>:
	}
	
}
void DIO_write_port(unsigned char portname,unsigned char portvalue)
{
	switch(portname)
 616:	82 34       	cpi	r24, 0x42	; 66
 618:	61 f0       	breq	.+24     	; 0x632 <DIO_write_port+0x1c>
 61a:	83 34       	cpi	r24, 0x43	; 67
 61c:	18 f4       	brcc	.+6      	; 0x624 <DIO_write_port+0xe>
 61e:	81 34       	cpi	r24, 0x41	; 65
 620:	69 f4       	brne	.+26     	; 0x63c <DIO_write_port+0x26>
 622:	05 c0       	rjmp	.+10     	; 0x62e <DIO_write_port+0x18>
 624:	83 34       	cpi	r24, 0x43	; 67
 626:	39 f0       	breq	.+14     	; 0x636 <DIO_write_port+0x20>
 628:	84 34       	cpi	r24, 0x44	; 68
 62a:	41 f4       	brne	.+16     	; 0x63c <DIO_write_port+0x26>
 62c:	06 c0       	rjmp	.+12     	; 0x63a <DIO_write_port+0x24>
	{
		case 'A' :
		PORTA=portvalue; //Write the given value to the port A
 62e:	6b bb       	out	0x1b, r22	; 27
		break ;
 630:	08 95       	ret
		case 'B':
		PORTB=portvalue; //Write the given value to the port B
 632:	68 bb       	out	0x18, r22	; 24
		break ;
 634:	08 95       	ret
		case 'C' :
		PORTC=portvalue; //Write the given value to the port C
 636:	65 bb       	out	0x15, r22	; 21
		break ;
 638:	08 95       	ret
		case 'D':
		PORTD=portvalue; //Write the given value to the port D
 63a:	62 bb       	out	0x12, r22	; 18
 63c:	08 95       	ret

0000063e <DIO_read_port>:
}

unsigned char DIO_read_port(unsigned char portname)
{
	unsigned char return_val=0;
	switch(portname)
 63e:	82 34       	cpi	r24, 0x42	; 66
 640:	61 f0       	breq	.+24     	; 0x65a <DIO_read_port+0x1c>
 642:	83 34       	cpi	r24, 0x43	; 67
 644:	18 f4       	brcc	.+6      	; 0x64c <DIO_read_port+0xe>
 646:	81 34       	cpi	r24, 0x41	; 65
 648:	71 f4       	brne	.+28     	; 0x666 <DIO_read_port+0x28>
 64a:	05 c0       	rjmp	.+10     	; 0x656 <DIO_read_port+0x18>
 64c:	83 34       	cpi	r24, 0x43	; 67
 64e:	39 f0       	breq	.+14     	; 0x65e <DIO_read_port+0x20>
 650:	84 34       	cpi	r24, 0x44	; 68
 652:	49 f4       	brne	.+18     	; 0x666 <DIO_read_port+0x28>
 654:	06 c0       	rjmp	.+12     	; 0x662 <DIO_read_port+0x24>
	{
		case 'A' :
		return_val=PINA; // read the value of port A 
 656:	89 b3       	in	r24, 0x19	; 25
		break ;
 658:	08 95       	ret
		case 'B':
		return_val=PINB; // read the value of port B 
 65a:	86 b3       	in	r24, 0x16	; 22
		break ;
 65c:	08 95       	ret
		case 'C' :
		return_val=PINC; // read the value of port C 
 65e:	83 b3       	in	r24, 0x13	; 19
		break ;
 660:	08 95       	ret
		case 'D':
		return_val=PIND; // read the value of port D 
 662:	80 b3       	in	r24, 0x10	; 16
		break ;
 664:	08 95       	ret
	}
}

unsigned char DIO_read_port(unsigned char portname)
{
	unsigned char return_val=0;
 666:	80 e0       	ldi	r24, 0x00	; 0
		break ;
		default:
		break ;
	}
	return return_val;
}
 668:	08 95       	ret

0000066a <DIO_vconnectpullup>:

void DIO_vconnectpullup(char portname ,char pinnumber, char connect_pullup)
{
	switch(portname)
 66a:	82 34       	cpi	r24, 0x42	; 66
 66c:	51 f1       	breq	.+84     	; 0x6c2 <DIO_vconnectpullup+0x58>
 66e:	83 34       	cpi	r24, 0x43	; 67
 670:	20 f4       	brcc	.+8      	; 0x67a <DIO_vconnectpullup+0x10>
 672:	81 34       	cpi	r24, 0x41	; 65
 674:	09 f0       	breq	.+2      	; 0x678 <DIO_vconnectpullup+0xe>
 676:	7b c0       	rjmp	.+246    	; 0x76e <DIO_vconnectpullup+0x104>
 678:	07 c0       	rjmp	.+14     	; 0x688 <DIO_vconnectpullup+0x1e>
 67a:	83 34       	cpi	r24, 0x43	; 67
 67c:	09 f4       	brne	.+2      	; 0x680 <DIO_vconnectpullup+0x16>
 67e:	3e c0       	rjmp	.+124    	; 0x6fc <DIO_vconnectpullup+0x92>
 680:	84 34       	cpi	r24, 0x44	; 68
 682:	09 f0       	breq	.+2      	; 0x686 <DIO_vconnectpullup+0x1c>
 684:	74 c0       	rjmp	.+232    	; 0x76e <DIO_vconnectpullup+0x104>
 686:	57 c0       	rjmp	.+174    	; 0x736 <DIO_vconnectpullup+0xcc>
	{
		case 'A':
		if(connect_pullup==1)
 688:	41 30       	cpi	r20, 0x01	; 1
 68a:	69 f4       	brne	.+26     	; 0x6a6 <DIO_vconnectpullup+0x3c>
		{
			SET_BIT(PORTA,pinnumber);
 68c:	2b b3       	in	r18, 0x1b	; 27
 68e:	81 e0       	ldi	r24, 0x01	; 1
 690:	90 e0       	ldi	r25, 0x00	; 0
 692:	ac 01       	movw	r20, r24
 694:	02 c0       	rjmp	.+4      	; 0x69a <DIO_vconnectpullup+0x30>
 696:	44 0f       	add	r20, r20
 698:	55 1f       	adc	r21, r21
 69a:	6a 95       	dec	r22
 69c:	e2 f7       	brpl	.-8      	; 0x696 <DIO_vconnectpullup+0x2c>
 69e:	ba 01       	movw	r22, r20
 6a0:	62 2b       	or	r22, r18
 6a2:	6b bb       	out	0x1b, r22	; 27
 6a4:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTA,pinnumber);
 6a6:	2b b3       	in	r18, 0x1b	; 27
 6a8:	81 e0       	ldi	r24, 0x01	; 1
 6aa:	90 e0       	ldi	r25, 0x00	; 0
 6ac:	ac 01       	movw	r20, r24
 6ae:	02 c0       	rjmp	.+4      	; 0x6b4 <DIO_vconnectpullup+0x4a>
 6b0:	44 0f       	add	r20, r20
 6b2:	55 1f       	adc	r21, r21
 6b4:	6a 95       	dec	r22
 6b6:	e2 f7       	brpl	.-8      	; 0x6b0 <DIO_vconnectpullup+0x46>
 6b8:	ba 01       	movw	r22, r20
 6ba:	60 95       	com	r22
 6bc:	62 23       	and	r22, r18
 6be:	6b bb       	out	0x1b, r22	; 27
 6c0:	08 95       	ret
		}
		break;
		case 'B':
		if(connect_pullup==1)
 6c2:	41 30       	cpi	r20, 0x01	; 1
 6c4:	69 f4       	brne	.+26     	; 0x6e0 <DIO_vconnectpullup+0x76>
		{
			SET_BIT(PORTB,pinnumber);
 6c6:	28 b3       	in	r18, 0x18	; 24
 6c8:	81 e0       	ldi	r24, 0x01	; 1
 6ca:	90 e0       	ldi	r25, 0x00	; 0
 6cc:	ac 01       	movw	r20, r24
 6ce:	02 c0       	rjmp	.+4      	; 0x6d4 <DIO_vconnectpullup+0x6a>
 6d0:	44 0f       	add	r20, r20
 6d2:	55 1f       	adc	r21, r21
 6d4:	6a 95       	dec	r22
 6d6:	e2 f7       	brpl	.-8      	; 0x6d0 <DIO_vconnectpullup+0x66>
 6d8:	ba 01       	movw	r22, r20
 6da:	62 2b       	or	r22, r18
 6dc:	68 bb       	out	0x18, r22	; 24
 6de:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTB,pinnumber);
 6e0:	28 b3       	in	r18, 0x18	; 24
 6e2:	81 e0       	ldi	r24, 0x01	; 1
 6e4:	90 e0       	ldi	r25, 0x00	; 0
 6e6:	ac 01       	movw	r20, r24
 6e8:	02 c0       	rjmp	.+4      	; 0x6ee <DIO_vconnectpullup+0x84>
 6ea:	44 0f       	add	r20, r20
 6ec:	55 1f       	adc	r21, r21
 6ee:	6a 95       	dec	r22
 6f0:	e2 f7       	brpl	.-8      	; 0x6ea <DIO_vconnectpullup+0x80>
 6f2:	ba 01       	movw	r22, r20
 6f4:	60 95       	com	r22
 6f6:	62 23       	and	r22, r18
 6f8:	68 bb       	out	0x18, r22	; 24
 6fa:	08 95       	ret
		}
		break;
		case 'C':
		if(connect_pullup==1)
 6fc:	41 30       	cpi	r20, 0x01	; 1
 6fe:	69 f4       	brne	.+26     	; 0x71a <DIO_vconnectpullup+0xb0>
		{
			SET_BIT(PORTC,pinnumber);
 700:	25 b3       	in	r18, 0x15	; 21
 702:	81 e0       	ldi	r24, 0x01	; 1
 704:	90 e0       	ldi	r25, 0x00	; 0
 706:	ac 01       	movw	r20, r24
 708:	02 c0       	rjmp	.+4      	; 0x70e <DIO_vconnectpullup+0xa4>
 70a:	44 0f       	add	r20, r20
 70c:	55 1f       	adc	r21, r21
 70e:	6a 95       	dec	r22
 710:	e2 f7       	brpl	.-8      	; 0x70a <DIO_vconnectpullup+0xa0>
 712:	ba 01       	movw	r22, r20
 714:	62 2b       	or	r22, r18
 716:	65 bb       	out	0x15, r22	; 21
 718:	08 95       	ret
			
		}
		else
		{
			CLR_BIT(PORTC,pinnumber);
 71a:	25 b3       	in	r18, 0x15	; 21
 71c:	81 e0       	ldi	r24, 0x01	; 1
 71e:	90 e0       	ldi	r25, 0x00	; 0
 720:	ac 01       	movw	r20, r24
 722:	02 c0       	rjmp	.+4      	; 0x728 <DIO_vconnectpullup+0xbe>
 724:	44 0f       	add	r20, r20
 726:	55 1f       	adc	r21, r21
 728:	6a 95       	dec	r22
 72a:	e2 f7       	brpl	.-8      	; 0x724 <DIO_vconnectpullup+0xba>
 72c:	ba 01       	movw	r22, r20
 72e:	60 95       	com	r22
 730:	62 23       	and	r22, r18
 732:	65 bb       	out	0x15, r22	; 21
 734:	08 95       	ret
		}
		break;
		case 'D':
		if(connect_pullup==1)
 736:	41 30       	cpi	r20, 0x01	; 1
 738:	69 f4       	brne	.+26     	; 0x754 <DIO_vconnectpullup+0xea>
		{
			SET_BIT(PORTD,pinnumber);
 73a:	22 b3       	in	r18, 0x12	; 18
 73c:	81 e0       	ldi	r24, 0x01	; 1
 73e:	90 e0       	ldi	r25, 0x00	; 0
 740:	ac 01       	movw	r20, r24
 742:	02 c0       	rjmp	.+4      	; 0x748 <DIO_vconnectpullup+0xde>
 744:	44 0f       	add	r20, r20
 746:	55 1f       	adc	r21, r21
 748:	6a 95       	dec	r22
 74a:	e2 f7       	brpl	.-8      	; 0x744 <DIO_vconnectpullup+0xda>
 74c:	ba 01       	movw	r22, r20
 74e:	62 2b       	or	r22, r18
 750:	62 bb       	out	0x12, r22	; 18
 752:	08 95       	ret
			
		}
		else
		{
			CLR_BIT(PORTD,pinnumber);
 754:	22 b3       	in	r18, 0x12	; 18
 756:	81 e0       	ldi	r24, 0x01	; 1
 758:	90 e0       	ldi	r25, 0x00	; 0
 75a:	ac 01       	movw	r20, r24
 75c:	02 c0       	rjmp	.+4      	; 0x762 <DIO_vconnectpullup+0xf8>
 75e:	44 0f       	add	r20, r20
 760:	55 1f       	adc	r21, r21
 762:	6a 95       	dec	r22
 764:	e2 f7       	brpl	.-8      	; 0x75e <DIO_vconnectpullup+0xf4>
 766:	ba 01       	movw	r22, r20
 768:	60 95       	com	r22
 76a:	62 23       	and	r22, r18
 76c:	62 bb       	out	0x12, r22	; 18
 76e:	08 95       	ret

00000770 <write_low_nibble>:
	}
}

void write_low_nibble(unsigned char portname,unsigned char value)
{
	value&=0x0f;
 770:	6f 70       	andi	r22, 0x0F	; 15
	switch(portname)
 772:	82 34       	cpi	r24, 0x42	; 66
 774:	81 f0       	breq	.+32     	; 0x796 <write_low_nibble+0x26>
 776:	83 34       	cpi	r24, 0x43	; 67
 778:	18 f4       	brcc	.+6      	; 0x780 <write_low_nibble+0x10>
 77a:	81 34       	cpi	r24, 0x41	; 65
 77c:	f1 f4       	brne	.+60     	; 0x7ba <write_low_nibble+0x4a>
 77e:	05 c0       	rjmp	.+10     	; 0x78a <write_low_nibble+0x1a>
 780:	83 34       	cpi	r24, 0x43	; 67
 782:	79 f0       	breq	.+30     	; 0x7a2 <write_low_nibble+0x32>
 784:	84 34       	cpi	r24, 0x44	; 68
 786:	c9 f4       	brne	.+50     	; 0x7ba <write_low_nibble+0x4a>
 788:	12 c0       	rjmp	.+36     	; 0x7ae <write_low_nibble+0x3e>
	{
		case 'A':
		PORTA&=0xf0;
 78a:	8b b3       	in	r24, 0x1b	; 27
 78c:	80 7f       	andi	r24, 0xF0	; 240
 78e:	8b bb       	out	0x1b, r24	; 27
		PORTA|=value;
 790:	8b b3       	in	r24, 0x1b	; 27
 792:	86 2b       	or	r24, r22
 794:	8b bb       	out	0x1b, r24	; 27
		case 'B':
		PORTB&=0xf0;
 796:	88 b3       	in	r24, 0x18	; 24
 798:	80 7f       	andi	r24, 0xF0	; 240
 79a:	88 bb       	out	0x18, r24	; 24
		PORTB|=value;
 79c:	88 b3       	in	r24, 0x18	; 24
 79e:	86 2b       	or	r24, r22
 7a0:	88 bb       	out	0x18, r24	; 24
		case 'C':
		PORTC&=0xf0;
 7a2:	85 b3       	in	r24, 0x15	; 21
 7a4:	80 7f       	andi	r24, 0xF0	; 240
 7a6:	85 bb       	out	0x15, r24	; 21
		PORTC|=value;
 7a8:	85 b3       	in	r24, 0x15	; 21
 7aa:	86 2b       	or	r24, r22
 7ac:	85 bb       	out	0x15, r24	; 21
		case 'D':
		PORTD&=0xf0;
 7ae:	82 b3       	in	r24, 0x12	; 18
 7b0:	80 7f       	andi	r24, 0xF0	; 240
 7b2:	82 bb       	out	0x12, r24	; 18
		PORTD|=value;
 7b4:	82 b3       	in	r24, 0x12	; 18
 7b6:	68 2b       	or	r22, r24
 7b8:	62 bb       	out	0x12, r22	; 18
 7ba:	08 95       	ret

000007bc <write_high_nibble>:
	}
}

void write_high_nibble(unsigned char portname,unsigned char value)
{
	value<<=4;
 7bc:	62 95       	swap	r22
 7be:	60 7f       	andi	r22, 0xF0	; 240
	switch(portname)
 7c0:	82 34       	cpi	r24, 0x42	; 66
 7c2:	81 f0       	breq	.+32     	; 0x7e4 <write_high_nibble+0x28>
 7c4:	83 34       	cpi	r24, 0x43	; 67
 7c6:	18 f4       	brcc	.+6      	; 0x7ce <write_high_nibble+0x12>
 7c8:	81 34       	cpi	r24, 0x41	; 65
 7ca:	f1 f4       	brne	.+60     	; 0x808 <write_high_nibble+0x4c>
 7cc:	05 c0       	rjmp	.+10     	; 0x7d8 <write_high_nibble+0x1c>
 7ce:	83 34       	cpi	r24, 0x43	; 67
 7d0:	79 f0       	breq	.+30     	; 0x7f0 <write_high_nibble+0x34>
 7d2:	84 34       	cpi	r24, 0x44	; 68
 7d4:	c9 f4       	brne	.+50     	; 0x808 <write_high_nibble+0x4c>
 7d6:	12 c0       	rjmp	.+36     	; 0x7fc <write_high_nibble+0x40>
	{
		case 'A':
		PORTA&=0x0f;
 7d8:	8b b3       	in	r24, 0x1b	; 27
 7da:	8f 70       	andi	r24, 0x0F	; 15
 7dc:	8b bb       	out	0x1b, r24	; 27
		PORTA|=value;
 7de:	8b b3       	in	r24, 0x1b	; 27
 7e0:	86 2b       	or	r24, r22
 7e2:	8b bb       	out	0x1b, r24	; 27
		case 'B':
		PORTB&=0x0f;
 7e4:	88 b3       	in	r24, 0x18	; 24
 7e6:	8f 70       	andi	r24, 0x0F	; 15
 7e8:	88 bb       	out	0x18, r24	; 24
		PORTB|=value;
 7ea:	88 b3       	in	r24, 0x18	; 24
 7ec:	86 2b       	or	r24, r22
 7ee:	88 bb       	out	0x18, r24	; 24
		case 'C':
		PORTC&=0x0f;
 7f0:	85 b3       	in	r24, 0x15	; 21
 7f2:	8f 70       	andi	r24, 0x0F	; 15
 7f4:	85 bb       	out	0x15, r24	; 21
		PORTC|=value;
 7f6:	85 b3       	in	r24, 0x15	; 21
 7f8:	86 2b       	or	r24, r22
 7fa:	85 bb       	out	0x15, r24	; 21
		case 'D':
		PORTD&=0x0f;
 7fc:	82 b3       	in	r24, 0x12	; 18
 7fe:	8f 70       	andi	r24, 0x0F	; 15
 800:	82 bb       	out	0x12, r24	; 18
		PORTD|=value;
 802:	82 b3       	in	r24, 0x12	; 18
 804:	68 2b       	or	r22, r24
 806:	62 bb       	out	0x12, r22	; 18
 808:	08 95       	ret

0000080a <LED_vInit>:
*  Author: Mohamed Zaghlol
*/
#include "DIO.h"
void LED_vInit(unsigned char portname,unsigned char pinnumber)
{
	DIO_vsetPINDir(portname,pinnumber,1);//Set the given pin in the given port as an output
 80a:	41 e0       	ldi	r20, 0x01	; 1
 80c:	0e 94 59 01 	call	0x2b2	; 0x2b2 <DIO_vsetPINDir>
}
 810:	08 95       	ret

00000812 <LED_vTurnOn>:
void LED_vTurnOn(unsigned char portname,unsigned char pinnumber)
{
	DIO_write(portname,pinnumber,1);//Set the given pin in the given port to one(on)
 812:	41 e0       	ldi	r20, 0x01	; 1
 814:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <DIO_write>
}
 818:	08 95       	ret

0000081a <LED_vTurnOff>:
void LED_vTurnOff(unsigned char portname,unsigned char pinnumber)
{
	DIO_write(portname,pinnumber,0);//Set the given pin in the given port to zero(off)
 81a:	40 e0       	ldi	r20, 0x00	; 0
 81c:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <DIO_write>
}
 820:	08 95       	ret

00000822 <LED_vToggle>:
void LED_vToggle(unsigned char portname,unsigned char pinnumber)
{
	DIO_toggle(portname,pinnumber);//Set the given pin in the given port to zero if it is one or set it to one if it is zero
 822:	0e 94 b7 02 	call	0x56e	; 0x56e <DIO_toggle>
}
 826:	08 95       	ret

00000828 <PWM>:
#define  F_CPU 8000000UL
#include <util/delay.h>
#include "DIO.h"

void PWM(unsigned char port, unsigned pin, double value)
{
 828:	cf 92       	push	r12
 82a:	df 92       	push	r13
 82c:	ef 92       	push	r14
 82e:	ff 92       	push	r15
 830:	cf 93       	push	r28
 832:	df 93       	push	r29
 834:	d8 2f       	mov	r29, r24
 836:	c6 2f       	mov	r28, r22
 838:	69 01       	movw	r12, r18
 83a:	7a 01       	movw	r14, r20
	
	 
	 if (value==1)
 83c:	ca 01       	movw	r24, r20
 83e:	b9 01       	movw	r22, r18
 840:	20 e0       	ldi	r18, 0x00	; 0
 842:	30 e0       	ldi	r19, 0x00	; 0
 844:	40 e8       	ldi	r20, 0x80	; 128
 846:	5f e3       	ldi	r21, 0x3F	; 63
 848:	0e 94 99 05 	call	0xb32	; 0xb32 <__cmpsf2>
 84c:	88 23       	and	r24, r24
 84e:	e1 f4       	brne	.+56     	; 0x888 <__stack+0x29>
	 {
		value=1;
		
		DIO_vsetPINDir(port,pin,1);
 850:	8d 2f       	mov	r24, r29
 852:	6c 2f       	mov	r22, r28
 854:	41 e0       	ldi	r20, 0x01	; 1
 856:	0e 94 59 01 	call	0x2b2	; 0x2b2 <DIO_vsetPINDir>
		DIO_write(port,pin,1);
 85a:	8d 2f       	mov	r24, r29
 85c:	6c 2f       	mov	r22, r28
 85e:	41 e0       	ldi	r20, 0x01	; 1
 860:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <DIO_write>
 864:	8f ec       	ldi	r24, 0xCF	; 207
 866:	97 e0       	ldi	r25, 0x07	; 7
 868:	01 97       	sbiw	r24, 0x01	; 1
 86a:	f1 f7       	brne	.-4      	; 0x868 <__stack+0x9>
 86c:	00 c0       	rjmp	.+0      	; 0x86e <__stack+0xf>
 86e:	00 00       	nop
		_delay_ms(value);
		DIO_write(port,pin,0);
 870:	8d 2f       	mov	r24, r29
 872:	6c 2f       	mov	r22, r28
 874:	40 e0       	ldi	r20, 0x00	; 0
 876:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <DIO_write>
 87a:	8f e6       	ldi	r24, 0x6F	; 111
 87c:	94 e9       	ldi	r25, 0x94	; 148
 87e:	01 97       	sbiw	r24, 0x01	; 1
 880:	f1 f7       	brne	.-4      	; 0x87e <__stack+0x1f>
 882:	00 c0       	rjmp	.+0      	; 0x884 <__stack+0x25>
 884:	00 00       	nop
 886:	4c c0       	rjmp	.+152    	; 0x920 <__stack+0xc1>
		_delay_ms(20-value); 
	 }
	 
	 if (value==1.5)
 888:	c7 01       	movw	r24, r14
 88a:	b6 01       	movw	r22, r12
 88c:	20 e0       	ldi	r18, 0x00	; 0
 88e:	30 e0       	ldi	r19, 0x00	; 0
 890:	40 ec       	ldi	r20, 0xC0	; 192
 892:	5f e3       	ldi	r21, 0x3F	; 63
 894:	0e 94 99 05 	call	0xb32	; 0xb32 <__cmpsf2>
 898:	88 23       	and	r24, r24
 89a:	e1 f4       	brne	.+56     	; 0x8d4 <__stack+0x75>
	 {
		 value=1.5;
		 
		 DIO_vsetPINDir(port,pin,1);
 89c:	8d 2f       	mov	r24, r29
 89e:	6c 2f       	mov	r22, r28
 8a0:	41 e0       	ldi	r20, 0x01	; 1
 8a2:	0e 94 59 01 	call	0x2b2	; 0x2b2 <DIO_vsetPINDir>
		 DIO_write(port,pin,1);
 8a6:	8d 2f       	mov	r24, r29
 8a8:	6c 2f       	mov	r22, r28
 8aa:	41 e0       	ldi	r20, 0x01	; 1
 8ac:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <DIO_write>
 8b0:	87 eb       	ldi	r24, 0xB7	; 183
 8b2:	9b e0       	ldi	r25, 0x0B	; 11
 8b4:	01 97       	sbiw	r24, 0x01	; 1
 8b6:	f1 f7       	brne	.-4      	; 0x8b4 <__stack+0x55>
 8b8:	00 c0       	rjmp	.+0      	; 0x8ba <__stack+0x5b>
 8ba:	00 00       	nop
		 _delay_ms(value);
		 DIO_write(port,pin,0);
 8bc:	8d 2f       	mov	r24, r29
 8be:	6c 2f       	mov	r22, r28
 8c0:	40 e0       	ldi	r20, 0x00	; 0
 8c2:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <DIO_write>
 8c6:	87 e8       	ldi	r24, 0x87	; 135
 8c8:	90 e9       	ldi	r25, 0x90	; 144
 8ca:	01 97       	sbiw	r24, 0x01	; 1
 8cc:	f1 f7       	brne	.-4      	; 0x8ca <__stack+0x6b>
 8ce:	00 c0       	rjmp	.+0      	; 0x8d0 <__stack+0x71>
 8d0:	00 00       	nop
 8d2:	4c c0       	rjmp	.+152    	; 0x96c <__stack+0x10d>
		 _delay_ms(20-value);
	 }
	 
	 if (value==2)
 8d4:	c7 01       	movw	r24, r14
 8d6:	b6 01       	movw	r22, r12
 8d8:	20 e0       	ldi	r18, 0x00	; 0
 8da:	30 e0       	ldi	r19, 0x00	; 0
 8dc:	40 e0       	ldi	r20, 0x00	; 0
 8de:	50 e4       	ldi	r21, 0x40	; 64
 8e0:	0e 94 99 05 	call	0xb32	; 0xb32 <__cmpsf2>
 8e4:	88 23       	and	r24, r24
 8e6:	e1 f4       	brne	.+56     	; 0x920 <__stack+0xc1>
	 {
		 value=2;
		 
		 DIO_vsetPINDir(port,pin,1);
 8e8:	8d 2f       	mov	r24, r29
 8ea:	6c 2f       	mov	r22, r28
 8ec:	41 e0       	ldi	r20, 0x01	; 1
 8ee:	0e 94 59 01 	call	0x2b2	; 0x2b2 <DIO_vsetPINDir>
		 DIO_write(port,pin,1);
 8f2:	8d 2f       	mov	r24, r29
 8f4:	6c 2f       	mov	r22, r28
 8f6:	41 e0       	ldi	r20, 0x01	; 1
 8f8:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <DIO_write>
 8fc:	8f e9       	ldi	r24, 0x9F	; 159
 8fe:	9f e0       	ldi	r25, 0x0F	; 15
 900:	01 97       	sbiw	r24, 0x01	; 1
 902:	f1 f7       	brne	.-4      	; 0x900 <__stack+0xa1>
 904:	00 c0       	rjmp	.+0      	; 0x906 <__stack+0xa7>
 906:	00 00       	nop
		 _delay_ms(value);
		 DIO_write(port,pin,0);
 908:	8d 2f       	mov	r24, r29
 90a:	6c 2f       	mov	r22, r28
 90c:	40 e0       	ldi	r20, 0x00	; 0
 90e:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <DIO_write>
 912:	8f e9       	ldi	r24, 0x9F	; 159
 914:	9c e8       	ldi	r25, 0x8C	; 140
 916:	01 97       	sbiw	r24, 0x01	; 1
 918:	f1 f7       	brne	.-4      	; 0x916 <__stack+0xb7>
 91a:	00 c0       	rjmp	.+0      	; 0x91c <__stack+0xbd>
 91c:	00 00       	nop
 91e:	4b c0       	rjmp	.+150    	; 0x9b6 <__stack+0x157>
		 _delay_ms(20-value);
	 }
	 
	 
	 if (value==1.25)
 920:	c7 01       	movw	r24, r14
 922:	b6 01       	movw	r22, r12
 924:	20 e0       	ldi	r18, 0x00	; 0
 926:	30 e0       	ldi	r19, 0x00	; 0
 928:	40 ea       	ldi	r20, 0xA0	; 160
 92a:	5f e3       	ldi	r21, 0x3F	; 63
 92c:	0e 94 99 05 	call	0xb32	; 0xb32 <__cmpsf2>
 930:	88 23       	and	r24, r24
 932:	e1 f4       	brne	.+56     	; 0x96c <__stack+0x10d>
	 {
		 value=1.25;
		 
		 DIO_vsetPINDir(port,pin,1);
 934:	8d 2f       	mov	r24, r29
 936:	6c 2f       	mov	r22, r28
 938:	41 e0       	ldi	r20, 0x01	; 1
 93a:	0e 94 59 01 	call	0x2b2	; 0x2b2 <DIO_vsetPINDir>
		 DIO_write(port,pin,1);
 93e:	8d 2f       	mov	r24, r29
 940:	6c 2f       	mov	r22, r28
 942:	41 e0       	ldi	r20, 0x01	; 1
 944:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <DIO_write>
 948:	83 ec       	ldi	r24, 0xC3	; 195
 94a:	99 e0       	ldi	r25, 0x09	; 9
 94c:	01 97       	sbiw	r24, 0x01	; 1
 94e:	f1 f7       	brne	.-4      	; 0x94c <__stack+0xed>
 950:	00 c0       	rjmp	.+0      	; 0x952 <__stack+0xf3>
 952:	00 00       	nop
		 _delay_ms(value);
		 DIO_write(port,pin,0);
 954:	8d 2f       	mov	r24, r29
 956:	6c 2f       	mov	r22, r28
 958:	40 e0       	ldi	r20, 0x00	; 0
 95a:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <DIO_write>
 95e:	8b e7       	ldi	r24, 0x7B	; 123
 960:	92 e9       	ldi	r25, 0x92	; 146
 962:	01 97       	sbiw	r24, 0x01	; 1
 964:	f1 f7       	brne	.-4      	; 0x962 <__stack+0x103>
 966:	00 c0       	rjmp	.+0      	; 0x968 <__stack+0x109>
 968:	00 00       	nop
 96a:	25 c0       	rjmp	.+74     	; 0x9b6 <__stack+0x157>
		 _delay_ms(20-value);
	 }
	 if (value==1.75)
 96c:	c7 01       	movw	r24, r14
 96e:	b6 01       	movw	r22, r12
 970:	20 e0       	ldi	r18, 0x00	; 0
 972:	30 e0       	ldi	r19, 0x00	; 0
 974:	40 ee       	ldi	r20, 0xE0	; 224
 976:	5f e3       	ldi	r21, 0x3F	; 63
 978:	0e 94 99 05 	call	0xb32	; 0xb32 <__cmpsf2>
 97c:	88 23       	and	r24, r24
 97e:	d9 f4       	brne	.+54     	; 0x9b6 <__stack+0x157>
	 {
		 value=1.75;
		 
		 DIO_vsetPINDir(port,pin,1);
 980:	8d 2f       	mov	r24, r29
 982:	6c 2f       	mov	r22, r28
 984:	41 e0       	ldi	r20, 0x01	; 1
 986:	0e 94 59 01 	call	0x2b2	; 0x2b2 <DIO_vsetPINDir>
		 DIO_write(port,pin,1);
 98a:	8d 2f       	mov	r24, r29
 98c:	6c 2f       	mov	r22, r28
 98e:	41 e0       	ldi	r20, 0x01	; 1
 990:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <DIO_write>
 994:	8b ea       	ldi	r24, 0xAB	; 171
 996:	9d e0       	ldi	r25, 0x0D	; 13
 998:	01 97       	sbiw	r24, 0x01	; 1
 99a:	f1 f7       	brne	.-4      	; 0x998 <__stack+0x139>
 99c:	00 c0       	rjmp	.+0      	; 0x99e <__stack+0x13f>
 99e:	00 00       	nop
		 _delay_ms(value);
		 DIO_write(port,pin,0);
 9a0:	8d 2f       	mov	r24, r29
 9a2:	6c 2f       	mov	r22, r28
 9a4:	40 e0       	ldi	r20, 0x00	; 0
 9a6:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <DIO_write>
 9aa:	83 e9       	ldi	r24, 0x93	; 147
 9ac:	9e e8       	ldi	r25, 0x8E	; 142
 9ae:	01 97       	sbiw	r24, 0x01	; 1
 9b0:	f1 f7       	brne	.-4      	; 0x9ae <__stack+0x14f>
 9b2:	00 c0       	rjmp	.+0      	; 0x9b4 <__stack+0x155>
 9b4:	00 00       	nop
		 _delay_ms(20-value);
	 }
	
	
 9b6:	df 91       	pop	r29
 9b8:	cf 91       	pop	r28
 9ba:	ff 90       	pop	r15
 9bc:	ef 90       	pop	r14
 9be:	df 90       	pop	r13
 9c0:	cf 90       	pop	r12
 9c2:	08 95       	ret

000009c4 <timer_CTC_init_interrupt>:
#include <avr/interrupt.h>

void timer_CTC_init_interrupt(void)
{
	/* select CTC mode*/
	SET_BIT(TCCR0,WGM01);
 9c4:	83 b7       	in	r24, 0x33	; 51
 9c6:	88 60       	ori	r24, 0x08	; 8
 9c8:	83 bf       	out	0x33, r24	; 51
	/* load a value in OCR0 */
	OCR0=80;
 9ca:	80 e5       	ldi	r24, 0x50	; 80
 9cc:	8c bf       	out	0x3c, r24	; 60
	/* select timer clock */	
	SET_BIT(TCCR0,CS00);
 9ce:	83 b7       	in	r24, 0x33	; 51
 9d0:	81 60       	ori	r24, 0x01	; 1
 9d2:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,CS02);
 9d4:	83 b7       	in	r24, 0x33	; 51
 9d6:	84 60       	ori	r24, 0x04	; 4
 9d8:	83 bf       	out	0x33, r24	; 51
	/* enable interrupt*/
	sei();
 9da:	78 94       	sei
	SET_BIT(TIMSK,OCIE0);
 9dc:	89 b7       	in	r24, 0x39	; 57
 9de:	82 60       	ori	r24, 0x02	; 2
 9e0:	89 bf       	out	0x39, r24	; 57
}
 9e2:	08 95       	ret

000009e4 <timer_wave_nonPWM>:


void timer_wave_nonPWM(void)
{
	/* set OC0 as output pin */
	SET_BIT(DDRB,3);
 9e4:	bb 9a       	sbi	0x17, 3	; 23
	/* select CTC mode*/
	SET_BIT(TCCR0,WGM01);
 9e6:	83 b7       	in	r24, 0x33	; 51
 9e8:	88 60       	ori	r24, 0x08	; 8
 9ea:	83 bf       	out	0x33, r24	; 51
	/* load a value in OCR0 */
	OCR0=64;
 9ec:	80 e4       	ldi	r24, 0x40	; 64
 9ee:	8c bf       	out	0x3c, r24	; 60
	/* select timer clock */
	SET_BIT(TCCR0,CS00);
 9f0:	83 b7       	in	r24, 0x33	; 51
 9f2:	81 60       	ori	r24, 0x01	; 1
 9f4:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,CS02);
 9f6:	83 b7       	in	r24, 0x33	; 51
 9f8:	84 60       	ori	r24, 0x04	; 4
 9fa:	83 bf       	out	0x33, r24	; 51
	/* toggle OC0 on compare match*/
	SET_BIT(TCCR0,COM00);
 9fc:	83 b7       	in	r24, 0x33	; 51
 9fe:	80 61       	ori	r24, 0x10	; 16
 a00:	83 bf       	out	0x33, r24	; 51
}
 a02:	08 95       	ret

00000a04 <timer1_wave_fastPWM>:

void timer1_wave_fastPWM(double value)
{
	/* set OC1A as output pin */
	SET_BIT(DDRD,5);
 a04:	8d 9a       	sbi	0x11, 5	; 17
	/* select fast PWM mode*/
	SET_BIT(TCCR1A,WGM11);
 a06:	2f b5       	in	r18, 0x2f	; 47
 a08:	22 60       	ori	r18, 0x02	; 2
 a0a:	2f bd       	out	0x2f, r18	; 47
	SET_BIT(TCCR1B,WGM12);
 a0c:	2e b5       	in	r18, 0x2e	; 46
 a0e:	28 60       	ori	r18, 0x08	; 8
 a10:	2e bd       	out	0x2e, r18	; 46
	SET_BIT(TCCR1B,WGM13);
 a12:	2e b5       	in	r18, 0x2e	; 46
 a14:	20 61       	ori	r18, 0x10	; 16
 a16:	2e bd       	out	0x2e, r18	; 46
	/* load a value in OCR1A,ICR1 */
	OCR1A=(value*1000);
 a18:	20 e0       	ldi	r18, 0x00	; 0
 a1a:	30 e0       	ldi	r19, 0x00	; 0
 a1c:	4a e7       	ldi	r20, 0x7A	; 122
 a1e:	54 e4       	ldi	r21, 0x44	; 68
 a20:	0e 94 16 06 	call	0xc2c	; 0xc2c <__mulsf3>
 a24:	0e 94 9d 05 	call	0xb3a	; 0xb3a <__fixunssfsi>
 a28:	dc 01       	movw	r26, r24
 a2a:	cb 01       	movw	r24, r22
 a2c:	9b bd       	out	0x2b, r25	; 43
 a2e:	8a bd       	out	0x2a, r24	; 42
	ICR1=19999;
 a30:	8f e1       	ldi	r24, 0x1F	; 31
 a32:	9e e4       	ldi	r25, 0x4E	; 78
 a34:	97 bd       	out	0x27, r25	; 39
 a36:	86 bd       	out	0x26, r24	; 38
	/* select timer clock,  prescaling =8 */
	SET_BIT(TCCR1B,CS11);
 a38:	8e b5       	in	r24, 0x2e	; 46
 a3a:	82 60       	ori	r24, 0x02	; 2
 a3c:	8e bd       	out	0x2e, r24	; 46
	/* clear OC1A on compare match, set OC1A at BOTTOM,(non inverting mode)*/
	SET_BIT(TCCR1A,COM1A1);
 a3e:	8f b5       	in	r24, 0x2f	; 47
 a40:	80 68       	ori	r24, 0x80	; 128
 a42:	8f bd       	out	0x2f, r24	; 47

}
 a44:	08 95       	ret

00000a46 <timer1_wave_fastPWM_B>:

void timer1_wave_fastPWM_B(double value)
{
	/* set OC1B as output pin */
	SET_BIT(DDRD,4);
 a46:	8c 9a       	sbi	0x11, 4	; 17
	/* select fast PWM mode*/
	SET_BIT(TCCR1A,WGM11);
 a48:	2f b5       	in	r18, 0x2f	; 47
 a4a:	22 60       	ori	r18, 0x02	; 2
 a4c:	2f bd       	out	0x2f, r18	; 47
	SET_BIT(TCCR1B,WGM12);
 a4e:	2e b5       	in	r18, 0x2e	; 46
 a50:	28 60       	ori	r18, 0x08	; 8
 a52:	2e bd       	out	0x2e, r18	; 46
	SET_BIT(TCCR1B,WGM13);
 a54:	2e b5       	in	r18, 0x2e	; 46
 a56:	20 61       	ori	r18, 0x10	; 16
 a58:	2e bd       	out	0x2e, r18	; 46
	/* load a value in OCR1A,ICR1 */
	OCR1B=(value*1000);
 a5a:	20 e0       	ldi	r18, 0x00	; 0
 a5c:	30 e0       	ldi	r19, 0x00	; 0
 a5e:	4a e7       	ldi	r20, 0x7A	; 122
 a60:	54 e4       	ldi	r21, 0x44	; 68
 a62:	0e 94 16 06 	call	0xc2c	; 0xc2c <__mulsf3>
 a66:	0e 94 9d 05 	call	0xb3a	; 0xb3a <__fixunssfsi>
 a6a:	dc 01       	movw	r26, r24
 a6c:	cb 01       	movw	r24, r22
 a6e:	99 bd       	out	0x29, r25	; 41
 a70:	88 bd       	out	0x28, r24	; 40
	ICR1=19999;
 a72:	8f e1       	ldi	r24, 0x1F	; 31
 a74:	9e e4       	ldi	r25, 0x4E	; 78
 a76:	97 bd       	out	0x27, r25	; 39
 a78:	86 bd       	out	0x26, r24	; 38
	/* select timer clock, no prescaling */
	SET_BIT(TCCR1B,CS11);
 a7a:	8e b5       	in	r24, 0x2e	; 46
 a7c:	82 60       	ori	r24, 0x02	; 2
 a7e:	8e bd       	out	0x2e, r24	; 46
	/* clear OC1B on compare match, set OC1A at BOTTOM,(non inverting mode)*/
	SET_BIT(TCCR1A,COM1B1);
 a80:	8f b5       	in	r24, 0x2f	; 47
 a82:	80 62       	ori	r24, 0x20	; 32
 a84:	8f bd       	out	0x2f, r24	; 47
}
 a86:	08 95       	ret

00000a88 <timer_wave_phasecorrectPWM>:


void timer_wave_phasecorrectPWM(void)
{
	/* set OC0 as output pin */
	SET_BIT(DDRB,3);
 a88:	bb 9a       	sbi	0x17, 3	; 23
	/* select phase correct PWM mode*/
	SET_BIT(TCCR0,WGM00);
 a8a:	83 b7       	in	r24, 0x33	; 51
 a8c:	80 64       	ori	r24, 0x40	; 64
 a8e:	83 bf       	out	0x33, r24	; 51
	/* load a value in OCR0 */
	OCR0=64;
 a90:	80 e4       	ldi	r24, 0x40	; 64
 a92:	8c bf       	out	0x3c, r24	; 60
	/* select timer clock */
	SET_BIT(TCCR0,CS00);
 a94:	83 b7       	in	r24, 0x33	; 51
 a96:	81 60       	ori	r24, 0x01	; 1
 a98:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,CS02);
 a9a:	83 b7       	in	r24, 0x33	; 51
 a9c:	84 60       	ori	r24, 0x04	; 4
 a9e:	83 bf       	out	0x33, r24	; 51
	/* Set OC0 on compare match when up-counting. Clear OC0 on compare match when down counting.*/
	SET_BIT(TCCR0,COM00);
 aa0:	83 b7       	in	r24, 0x33	; 51
 aa2:	80 61       	ori	r24, 0x10	; 16
 aa4:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,COM01);
 aa6:	83 b7       	in	r24, 0x33	; 51
 aa8:	80 62       	ori	r24, 0x20	; 32
 aaa:	83 bf       	out	0x33, r24	; 51
}
 aac:	08 95       	ret

00000aae <dist>:

	


unsigned short dist(unsigned char port,unsigned char pin)
{
 aae:	cf 93       	push	r28
 ab0:	df 93       	push	r29
 ab2:	d8 2f       	mov	r29, r24
 ab4:	c6 2f       	mov	r28, r22
	unsigned short a1,b1,high1,distance;
	DIO_vsetPINDir(port,pin,1);
 ab6:	41 e0       	ldi	r20, 0x01	; 1
 ab8:	0e 94 59 01 	call	0x2b2	; 0x2b2 <DIO_vsetPINDir>
	a1=b1=high1=distance=0;
	TCCR1A = 0;
 abc:	1f bc       	out	0x2f, r1	; 47
	TIFR = (1<<ICF1);  	/* Clear ICF (Input Capture flag)  */
 abe:	80 e2       	ldi	r24, 0x20	; 32
 ac0:	88 bf       	out	0x38, r24	; 56
	DIO_write(port,pin,1);
 ac2:	8d 2f       	mov	r24, r29
 ac4:	6c 2f       	mov	r22, r28
 ac6:	41 e0       	ldi	r20, 0x01	; 1
 ac8:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <DIO_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 acc:	85 e8       	ldi	r24, 0x85	; 133
 ace:	8a 95       	dec	r24
 ad0:	f1 f7       	brne	.-4      	; 0xace <dist+0x20>
 ad2:	00 00       	nop
	_delay_us(50);
	DIO_write(port,pin,0);
 ad4:	8d 2f       	mov	r24, r29
 ad6:	6c 2f       	mov	r22, r28
 ad8:	40 e0       	ldi	r20, 0x00	; 0
 ada:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <DIO_write>
	
	//TCCR1B = 0xc1;  	/* Rising edge, no prescaler , noise canceler*/
	TCCR1B= 0xc2;	    /* Rising edge, prescaler = 8 , noise canceler*/
 ade:	82 ec       	ldi	r24, 0xC2	; 194
 ae0:	8e bd       	out	0x2e, r24	; 46
	while ((TIFR&(1<<ICF1)) == 0);
 ae2:	08 b6       	in	r0, 0x38	; 56
 ae4:	05 fe       	sbrs	r0, 5
 ae6:	fd cf       	rjmp	.-6      	; 0xae2 <dist+0x34>
	a1 = ICR1;  		/* Take value of capture register */
 ae8:	86 b5       	in	r24, 0x26	; 38
 aea:	97 b5       	in	r25, 0x27	; 39
	TIFR = (1<<ICF1);  	/* Clear ICF flag */
 aec:	20 e2       	ldi	r18, 0x20	; 32
 aee:	28 bf       	out	0x38, r18	; 56
	//TCCR1B = 0x81;  	/* Falling edge, no prescaler ,noise canceler*/
	TCCR1B = 0x82;   /* Falling edge, prescaler=8 ,noise canceler*/
 af0:	22 e8       	ldi	r18, 0x82	; 130
 af2:	2e bd       	out	0x2e, r18	; 46
	while ((TIFR&(1<<ICF1)) == 0);
 af4:	08 b6       	in	r0, 0x38	; 56
 af6:	05 fe       	sbrs	r0, 5
 af8:	fd cf       	rjmp	.-6      	; 0xaf4 <dist+0x46>
	b1 = ICR1;  		/* Take value of capture register */
 afa:	66 b5       	in	r22, 0x26	; 38
 afc:	77 b5       	in	r23, 0x27	; 39
	TIFR = (1<<ICF1);  	/* Clear ICF flag */
 afe:	20 e2       	ldi	r18, 0x20	; 32
 b00:	28 bf       	out	0x38, r18	; 56
	TCNT1=0;
 b02:	1d bc       	out	0x2d, r1	; 45
 b04:	1c bc       	out	0x2c, r1	; 44
	TCCR1B = 0;  		/* Stop the timer */
 b06:	1e bc       	out	0x2e, r1	; 46
	high1=b1-a1;
 b08:	68 1b       	sub	r22, r24
 b0a:	79 0b       	sbc	r23, r25
	distance=((high1*34600)/((F_CPU/8)*2)) ;//prescaler =8
 b0c:	80 e0       	ldi	r24, 0x00	; 0
 b0e:	90 e0       	ldi	r25, 0x00	; 0
 b10:	28 e2       	ldi	r18, 0x28	; 40
 b12:	37 e8       	ldi	r19, 0x87	; 135
 b14:	40 e0       	ldi	r20, 0x00	; 0
 b16:	50 e0       	ldi	r21, 0x00	; 0
 b18:	0e 94 a1 06 	call	0xd42	; 0xd42 <__mulsi3>
 b1c:	20 e8       	ldi	r18, 0x80	; 128
 b1e:	34 e8       	ldi	r19, 0x84	; 132
 b20:	4e e1       	ldi	r20, 0x1E	; 30
 b22:	50 e0       	ldi	r21, 0x00	; 0
 b24:	0e 94 c0 06 	call	0xd80	; 0xd80 <__udivmodsi4>
	
	return distance;
}
 b28:	82 2f       	mov	r24, r18
 b2a:	93 2f       	mov	r25, r19
 b2c:	df 91       	pop	r29
 b2e:	cf 91       	pop	r28
 b30:	08 95       	ret

00000b32 <__cmpsf2>:
 b32:	2f d0       	rcall	.+94     	; 0xb92 <__fp_cmp>
 b34:	08 f4       	brcc	.+2      	; 0xb38 <__cmpsf2+0x6>
 b36:	81 e0       	ldi	r24, 0x01	; 1
 b38:	08 95       	ret

00000b3a <__fixunssfsi>:
 b3a:	57 d0       	rcall	.+174    	; 0xbea <__fp_splitA>
 b3c:	88 f0       	brcs	.+34     	; 0xb60 <__fixunssfsi+0x26>
 b3e:	9f 57       	subi	r25, 0x7F	; 127
 b40:	90 f0       	brcs	.+36     	; 0xb66 <__fixunssfsi+0x2c>
 b42:	b9 2f       	mov	r27, r25
 b44:	99 27       	eor	r25, r25
 b46:	b7 51       	subi	r27, 0x17	; 23
 b48:	a0 f0       	brcs	.+40     	; 0xb72 <__fixunssfsi+0x38>
 b4a:	d1 f0       	breq	.+52     	; 0xb80 <__fixunssfsi+0x46>
 b4c:	66 0f       	add	r22, r22
 b4e:	77 1f       	adc	r23, r23
 b50:	88 1f       	adc	r24, r24
 b52:	99 1f       	adc	r25, r25
 b54:	1a f0       	brmi	.+6      	; 0xb5c <__fixunssfsi+0x22>
 b56:	ba 95       	dec	r27
 b58:	c9 f7       	brne	.-14     	; 0xb4c <__fixunssfsi+0x12>
 b5a:	12 c0       	rjmp	.+36     	; 0xb80 <__fixunssfsi+0x46>
 b5c:	b1 30       	cpi	r27, 0x01	; 1
 b5e:	81 f0       	breq	.+32     	; 0xb80 <__fixunssfsi+0x46>
 b60:	5e d0       	rcall	.+188    	; 0xc1e <__fp_zero>
 b62:	b1 e0       	ldi	r27, 0x01	; 1
 b64:	08 95       	ret
 b66:	5b c0       	rjmp	.+182    	; 0xc1e <__fp_zero>
 b68:	67 2f       	mov	r22, r23
 b6a:	78 2f       	mov	r23, r24
 b6c:	88 27       	eor	r24, r24
 b6e:	b8 5f       	subi	r27, 0xF8	; 248
 b70:	39 f0       	breq	.+14     	; 0xb80 <__fixunssfsi+0x46>
 b72:	b9 3f       	cpi	r27, 0xF9	; 249
 b74:	cc f3       	brlt	.-14     	; 0xb68 <__fixunssfsi+0x2e>
 b76:	86 95       	lsr	r24
 b78:	77 95       	ror	r23
 b7a:	67 95       	ror	r22
 b7c:	b3 95       	inc	r27
 b7e:	d9 f7       	brne	.-10     	; 0xb76 <__fixunssfsi+0x3c>
 b80:	3e f4       	brtc	.+14     	; 0xb90 <__fixunssfsi+0x56>
 b82:	90 95       	com	r25
 b84:	80 95       	com	r24
 b86:	70 95       	com	r23
 b88:	61 95       	neg	r22
 b8a:	7f 4f       	sbci	r23, 0xFF	; 255
 b8c:	8f 4f       	sbci	r24, 0xFF	; 255
 b8e:	9f 4f       	sbci	r25, 0xFF	; 255
 b90:	08 95       	ret

00000b92 <__fp_cmp>:
 b92:	99 0f       	add	r25, r25
 b94:	00 08       	sbc	r0, r0
 b96:	55 0f       	add	r21, r21
 b98:	aa 0b       	sbc	r26, r26
 b9a:	e0 e8       	ldi	r30, 0x80	; 128
 b9c:	fe ef       	ldi	r31, 0xFE	; 254
 b9e:	16 16       	cp	r1, r22
 ba0:	17 06       	cpc	r1, r23
 ba2:	e8 07       	cpc	r30, r24
 ba4:	f9 07       	cpc	r31, r25
 ba6:	c0 f0       	brcs	.+48     	; 0xbd8 <__fp_cmp+0x46>
 ba8:	12 16       	cp	r1, r18
 baa:	13 06       	cpc	r1, r19
 bac:	e4 07       	cpc	r30, r20
 bae:	f5 07       	cpc	r31, r21
 bb0:	98 f0       	brcs	.+38     	; 0xbd8 <__fp_cmp+0x46>
 bb2:	62 1b       	sub	r22, r18
 bb4:	73 0b       	sbc	r23, r19
 bb6:	84 0b       	sbc	r24, r20
 bb8:	95 0b       	sbc	r25, r21
 bba:	39 f4       	brne	.+14     	; 0xbca <__fp_cmp+0x38>
 bbc:	0a 26       	eor	r0, r26
 bbe:	61 f0       	breq	.+24     	; 0xbd8 <__fp_cmp+0x46>
 bc0:	23 2b       	or	r18, r19
 bc2:	24 2b       	or	r18, r20
 bc4:	25 2b       	or	r18, r21
 bc6:	21 f4       	brne	.+8      	; 0xbd0 <__fp_cmp+0x3e>
 bc8:	08 95       	ret
 bca:	0a 26       	eor	r0, r26
 bcc:	09 f4       	brne	.+2      	; 0xbd0 <__fp_cmp+0x3e>
 bce:	a1 40       	sbci	r26, 0x01	; 1
 bd0:	a6 95       	lsr	r26
 bd2:	8f ef       	ldi	r24, 0xFF	; 255
 bd4:	81 1d       	adc	r24, r1
 bd6:	81 1d       	adc	r24, r1
 bd8:	08 95       	ret

00000bda <__fp_split3>:
 bda:	57 fd       	sbrc	r21, 7
 bdc:	90 58       	subi	r25, 0x80	; 128
 bde:	44 0f       	add	r20, r20
 be0:	55 1f       	adc	r21, r21
 be2:	59 f0       	breq	.+22     	; 0xbfa <__fp_splitA+0x10>
 be4:	5f 3f       	cpi	r21, 0xFF	; 255
 be6:	71 f0       	breq	.+28     	; 0xc04 <__fp_splitA+0x1a>
 be8:	47 95       	ror	r20

00000bea <__fp_splitA>:
 bea:	88 0f       	add	r24, r24
 bec:	97 fb       	bst	r25, 7
 bee:	99 1f       	adc	r25, r25
 bf0:	61 f0       	breq	.+24     	; 0xc0a <__fp_splitA+0x20>
 bf2:	9f 3f       	cpi	r25, 0xFF	; 255
 bf4:	79 f0       	breq	.+30     	; 0xc14 <__fp_splitA+0x2a>
 bf6:	87 95       	ror	r24
 bf8:	08 95       	ret
 bfa:	12 16       	cp	r1, r18
 bfc:	13 06       	cpc	r1, r19
 bfe:	14 06       	cpc	r1, r20
 c00:	55 1f       	adc	r21, r21
 c02:	f2 cf       	rjmp	.-28     	; 0xbe8 <__fp_split3+0xe>
 c04:	46 95       	lsr	r20
 c06:	f1 df       	rcall	.-30     	; 0xbea <__fp_splitA>
 c08:	08 c0       	rjmp	.+16     	; 0xc1a <__fp_splitA+0x30>
 c0a:	16 16       	cp	r1, r22
 c0c:	17 06       	cpc	r1, r23
 c0e:	18 06       	cpc	r1, r24
 c10:	99 1f       	adc	r25, r25
 c12:	f1 cf       	rjmp	.-30     	; 0xbf6 <__fp_splitA+0xc>
 c14:	86 95       	lsr	r24
 c16:	71 05       	cpc	r23, r1
 c18:	61 05       	cpc	r22, r1
 c1a:	08 94       	sec
 c1c:	08 95       	ret

00000c1e <__fp_zero>:
 c1e:	e8 94       	clt

00000c20 <__fp_szero>:
 c20:	bb 27       	eor	r27, r27
 c22:	66 27       	eor	r22, r22
 c24:	77 27       	eor	r23, r23
 c26:	cb 01       	movw	r24, r22
 c28:	97 f9       	bld	r25, 7
 c2a:	08 95       	ret

00000c2c <__mulsf3>:
 c2c:	0b d0       	rcall	.+22     	; 0xc44 <__mulsf3x>
 c2e:	78 c0       	rjmp	.+240    	; 0xd20 <__fp_round>
 c30:	69 d0       	rcall	.+210    	; 0xd04 <__fp_pscA>
 c32:	28 f0       	brcs	.+10     	; 0xc3e <__mulsf3+0x12>
 c34:	6e d0       	rcall	.+220    	; 0xd12 <__fp_pscB>
 c36:	18 f0       	brcs	.+6      	; 0xc3e <__mulsf3+0x12>
 c38:	95 23       	and	r25, r21
 c3a:	09 f0       	breq	.+2      	; 0xc3e <__mulsf3+0x12>
 c3c:	5a c0       	rjmp	.+180    	; 0xcf2 <__fp_inf>
 c3e:	5f c0       	rjmp	.+190    	; 0xcfe <__fp_nan>
 c40:	11 24       	eor	r1, r1
 c42:	ee cf       	rjmp	.-36     	; 0xc20 <__fp_szero>

00000c44 <__mulsf3x>:
 c44:	ca df       	rcall	.-108    	; 0xbda <__fp_split3>
 c46:	a0 f3       	brcs	.-24     	; 0xc30 <__mulsf3+0x4>

00000c48 <__mulsf3_pse>:
 c48:	95 9f       	mul	r25, r21
 c4a:	d1 f3       	breq	.-12     	; 0xc40 <__mulsf3+0x14>
 c4c:	95 0f       	add	r25, r21
 c4e:	50 e0       	ldi	r21, 0x00	; 0
 c50:	55 1f       	adc	r21, r21
 c52:	62 9f       	mul	r22, r18
 c54:	f0 01       	movw	r30, r0
 c56:	72 9f       	mul	r23, r18
 c58:	bb 27       	eor	r27, r27
 c5a:	f0 0d       	add	r31, r0
 c5c:	b1 1d       	adc	r27, r1
 c5e:	63 9f       	mul	r22, r19
 c60:	aa 27       	eor	r26, r26
 c62:	f0 0d       	add	r31, r0
 c64:	b1 1d       	adc	r27, r1
 c66:	aa 1f       	adc	r26, r26
 c68:	64 9f       	mul	r22, r20
 c6a:	66 27       	eor	r22, r22
 c6c:	b0 0d       	add	r27, r0
 c6e:	a1 1d       	adc	r26, r1
 c70:	66 1f       	adc	r22, r22
 c72:	82 9f       	mul	r24, r18
 c74:	22 27       	eor	r18, r18
 c76:	b0 0d       	add	r27, r0
 c78:	a1 1d       	adc	r26, r1
 c7a:	62 1f       	adc	r22, r18
 c7c:	73 9f       	mul	r23, r19
 c7e:	b0 0d       	add	r27, r0
 c80:	a1 1d       	adc	r26, r1
 c82:	62 1f       	adc	r22, r18
 c84:	83 9f       	mul	r24, r19
 c86:	a0 0d       	add	r26, r0
 c88:	61 1d       	adc	r22, r1
 c8a:	22 1f       	adc	r18, r18
 c8c:	74 9f       	mul	r23, r20
 c8e:	33 27       	eor	r19, r19
 c90:	a0 0d       	add	r26, r0
 c92:	61 1d       	adc	r22, r1
 c94:	23 1f       	adc	r18, r19
 c96:	84 9f       	mul	r24, r20
 c98:	60 0d       	add	r22, r0
 c9a:	21 1d       	adc	r18, r1
 c9c:	82 2f       	mov	r24, r18
 c9e:	76 2f       	mov	r23, r22
 ca0:	6a 2f       	mov	r22, r26
 ca2:	11 24       	eor	r1, r1
 ca4:	9f 57       	subi	r25, 0x7F	; 127
 ca6:	50 40       	sbci	r21, 0x00	; 0
 ca8:	8a f0       	brmi	.+34     	; 0xccc <__mulsf3_pse+0x84>
 caa:	e1 f0       	breq	.+56     	; 0xce4 <__mulsf3_pse+0x9c>
 cac:	88 23       	and	r24, r24
 cae:	4a f0       	brmi	.+18     	; 0xcc2 <__mulsf3_pse+0x7a>
 cb0:	ee 0f       	add	r30, r30
 cb2:	ff 1f       	adc	r31, r31
 cb4:	bb 1f       	adc	r27, r27
 cb6:	66 1f       	adc	r22, r22
 cb8:	77 1f       	adc	r23, r23
 cba:	88 1f       	adc	r24, r24
 cbc:	91 50       	subi	r25, 0x01	; 1
 cbe:	50 40       	sbci	r21, 0x00	; 0
 cc0:	a9 f7       	brne	.-22     	; 0xcac <__mulsf3_pse+0x64>
 cc2:	9e 3f       	cpi	r25, 0xFE	; 254
 cc4:	51 05       	cpc	r21, r1
 cc6:	70 f0       	brcs	.+28     	; 0xce4 <__mulsf3_pse+0x9c>
 cc8:	14 c0       	rjmp	.+40     	; 0xcf2 <__fp_inf>
 cca:	aa cf       	rjmp	.-172    	; 0xc20 <__fp_szero>
 ccc:	5f 3f       	cpi	r21, 0xFF	; 255
 cce:	ec f3       	brlt	.-6      	; 0xcca <__mulsf3_pse+0x82>
 cd0:	98 3e       	cpi	r25, 0xE8	; 232
 cd2:	dc f3       	brlt	.-10     	; 0xcca <__mulsf3_pse+0x82>
 cd4:	86 95       	lsr	r24
 cd6:	77 95       	ror	r23
 cd8:	67 95       	ror	r22
 cda:	b7 95       	ror	r27
 cdc:	f7 95       	ror	r31
 cde:	e7 95       	ror	r30
 ce0:	9f 5f       	subi	r25, 0xFF	; 255
 ce2:	c1 f7       	brne	.-16     	; 0xcd4 <__mulsf3_pse+0x8c>
 ce4:	fe 2b       	or	r31, r30
 ce6:	88 0f       	add	r24, r24
 ce8:	91 1d       	adc	r25, r1
 cea:	96 95       	lsr	r25
 cec:	87 95       	ror	r24
 cee:	97 f9       	bld	r25, 7
 cf0:	08 95       	ret

00000cf2 <__fp_inf>:
 cf2:	97 f9       	bld	r25, 7
 cf4:	9f 67       	ori	r25, 0x7F	; 127
 cf6:	80 e8       	ldi	r24, 0x80	; 128
 cf8:	70 e0       	ldi	r23, 0x00	; 0
 cfa:	60 e0       	ldi	r22, 0x00	; 0
 cfc:	08 95       	ret

00000cfe <__fp_nan>:
 cfe:	9f ef       	ldi	r25, 0xFF	; 255
 d00:	80 ec       	ldi	r24, 0xC0	; 192
 d02:	08 95       	ret

00000d04 <__fp_pscA>:
 d04:	00 24       	eor	r0, r0
 d06:	0a 94       	dec	r0
 d08:	16 16       	cp	r1, r22
 d0a:	17 06       	cpc	r1, r23
 d0c:	18 06       	cpc	r1, r24
 d0e:	09 06       	cpc	r0, r25
 d10:	08 95       	ret

00000d12 <__fp_pscB>:
 d12:	00 24       	eor	r0, r0
 d14:	0a 94       	dec	r0
 d16:	12 16       	cp	r1, r18
 d18:	13 06       	cpc	r1, r19
 d1a:	14 06       	cpc	r1, r20
 d1c:	05 06       	cpc	r0, r21
 d1e:	08 95       	ret

00000d20 <__fp_round>:
 d20:	09 2e       	mov	r0, r25
 d22:	03 94       	inc	r0
 d24:	00 0c       	add	r0, r0
 d26:	11 f4       	brne	.+4      	; 0xd2c <__fp_round+0xc>
 d28:	88 23       	and	r24, r24
 d2a:	52 f0       	brmi	.+20     	; 0xd40 <__fp_round+0x20>
 d2c:	bb 0f       	add	r27, r27
 d2e:	40 f4       	brcc	.+16     	; 0xd40 <__fp_round+0x20>
 d30:	bf 2b       	or	r27, r31
 d32:	11 f4       	brne	.+4      	; 0xd38 <__fp_round+0x18>
 d34:	60 ff       	sbrs	r22, 0
 d36:	04 c0       	rjmp	.+8      	; 0xd40 <__fp_round+0x20>
 d38:	6f 5f       	subi	r22, 0xFF	; 255
 d3a:	7f 4f       	sbci	r23, 0xFF	; 255
 d3c:	8f 4f       	sbci	r24, 0xFF	; 255
 d3e:	9f 4f       	sbci	r25, 0xFF	; 255
 d40:	08 95       	ret

00000d42 <__mulsi3>:
 d42:	62 9f       	mul	r22, r18
 d44:	d0 01       	movw	r26, r0
 d46:	73 9f       	mul	r23, r19
 d48:	f0 01       	movw	r30, r0
 d4a:	82 9f       	mul	r24, r18
 d4c:	e0 0d       	add	r30, r0
 d4e:	f1 1d       	adc	r31, r1
 d50:	64 9f       	mul	r22, r20
 d52:	e0 0d       	add	r30, r0
 d54:	f1 1d       	adc	r31, r1
 d56:	92 9f       	mul	r25, r18
 d58:	f0 0d       	add	r31, r0
 d5a:	83 9f       	mul	r24, r19
 d5c:	f0 0d       	add	r31, r0
 d5e:	74 9f       	mul	r23, r20
 d60:	f0 0d       	add	r31, r0
 d62:	65 9f       	mul	r22, r21
 d64:	f0 0d       	add	r31, r0
 d66:	99 27       	eor	r25, r25
 d68:	72 9f       	mul	r23, r18
 d6a:	b0 0d       	add	r27, r0
 d6c:	e1 1d       	adc	r30, r1
 d6e:	f9 1f       	adc	r31, r25
 d70:	63 9f       	mul	r22, r19
 d72:	b0 0d       	add	r27, r0
 d74:	e1 1d       	adc	r30, r1
 d76:	f9 1f       	adc	r31, r25
 d78:	bd 01       	movw	r22, r26
 d7a:	cf 01       	movw	r24, r30
 d7c:	11 24       	eor	r1, r1
 d7e:	08 95       	ret

00000d80 <__udivmodsi4>:
 d80:	a1 e2       	ldi	r26, 0x21	; 33
 d82:	1a 2e       	mov	r1, r26
 d84:	aa 1b       	sub	r26, r26
 d86:	bb 1b       	sub	r27, r27
 d88:	fd 01       	movw	r30, r26
 d8a:	0d c0       	rjmp	.+26     	; 0xda6 <__udivmodsi4_ep>

00000d8c <__udivmodsi4_loop>:
 d8c:	aa 1f       	adc	r26, r26
 d8e:	bb 1f       	adc	r27, r27
 d90:	ee 1f       	adc	r30, r30
 d92:	ff 1f       	adc	r31, r31
 d94:	a2 17       	cp	r26, r18
 d96:	b3 07       	cpc	r27, r19
 d98:	e4 07       	cpc	r30, r20
 d9a:	f5 07       	cpc	r31, r21
 d9c:	20 f0       	brcs	.+8      	; 0xda6 <__udivmodsi4_ep>
 d9e:	a2 1b       	sub	r26, r18
 da0:	b3 0b       	sbc	r27, r19
 da2:	e4 0b       	sbc	r30, r20
 da4:	f5 0b       	sbc	r31, r21

00000da6 <__udivmodsi4_ep>:
 da6:	66 1f       	adc	r22, r22
 da8:	77 1f       	adc	r23, r23
 daa:	88 1f       	adc	r24, r24
 dac:	99 1f       	adc	r25, r25
 dae:	1a 94       	dec	r1
 db0:	69 f7       	brne	.-38     	; 0xd8c <__udivmodsi4_loop>
 db2:	60 95       	com	r22
 db4:	70 95       	com	r23
 db6:	80 95       	com	r24
 db8:	90 95       	com	r25
 dba:	9b 01       	movw	r18, r22
 dbc:	ac 01       	movw	r20, r24
 dbe:	bd 01       	movw	r22, r26
 dc0:	cf 01       	movw	r24, r30
 dc2:	08 95       	ret

00000dc4 <_exit>:
 dc4:	f8 94       	cli

00000dc6 <__stop_program>:
 dc6:	ff cf       	rjmp	.-2      	; 0xdc6 <__stop_program>
